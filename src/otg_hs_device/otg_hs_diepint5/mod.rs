# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: OtgHsDiepint5 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct XfrcR { bits : u8 } impl XfrcR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EpdisdR { bits : u8 } impl EpdisdR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TocR { bits : u8 } impl TocR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct IttxfeR { bits : u8 } impl IttxfeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct InepneR { bits : u8 } impl InepneR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TxfeR { bits : u8 } impl TxfeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TxfifoudrnR { bits : u8 } impl TxfifoudrnR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BnaR { bits : u8 } impl BnaR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PktdrpstsR { bits : u8 } impl PktdrpstsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BerrR { bits : u8 } impl BerrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct NakR { bits : u8 } impl NakR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _XfrcW < 'a > { w : & 'a mut W } impl < 'a > _XfrcW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EpdisdW < 'a > { w : & 'a mut W } impl < 'a > _EpdisdW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TocW < 'a > { w : & 'a mut W } impl < 'a > _TocW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _IttxfeW < 'a > { w : & 'a mut W } impl < 'a > _IttxfeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _InepneW < 'a > { w : & 'a mut W } impl < 'a > _InepneW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TxfifoudrnW < 'a > { w : & 'a mut W } impl < 'a > _TxfifoudrnW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BnaW < 'a > { w : & 'a mut W } impl < 'a > _BnaW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PktdrpstsW < 'a > { w : & 'a mut W } impl < 'a > _PktdrpstsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BerrW < 'a > { w : & 'a mut W } impl < 'a > _BerrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _NakW < 'a > { w : & 'a mut W } impl < 'a > _NakW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Transfer completed interrupt" ] # [ inline ( always ) ] pub fn xfrc ( & self ) -> XfrcR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; XfrcR { bits } } # [ doc = "Bit 1 - Endpoint disabled interrupt" ] # [ inline ( always ) ] pub fn epdisd ( & self ) -> EpdisdR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EpdisdR { bits } } # [ doc = "Bit 3 - Timeout condition" ] # [ inline ( always ) ] pub fn toc ( & self ) -> TocR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TocR { bits } } # [ doc = "Bit 4 - IN token received when TxFIFO is empty" ] # [ inline ( always ) ] pub fn ittxfe ( & self ) -> IttxfeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; IttxfeR { bits } } # [ doc = "Bit 6 - IN endpoint NAK effective" ] # [ inline ( always ) ] pub fn inepne ( & self ) -> InepneR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; InepneR { bits } } # [ doc = "Bit 7 - Transmit FIFO empty" ] # [ inline ( always ) ] pub fn txfe ( & self ) -> TxfeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TxfeR { bits } } # [ doc = "Bit 8 - Transmit Fifo Underrun" ] # [ inline ( always ) ] pub fn txfifoudrn ( & self ) -> TxfifoudrnR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TxfifoudrnR { bits } } # [ doc = "Bit 9 - Buffer not available interrupt" ] # [ inline ( always ) ] pub fn bna ( & self ) -> BnaR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BnaR { bits } } # [ doc = "Bit 11 - Packet dropped status" ] # [ inline ( always ) ] pub fn pktdrpsts ( & self ) -> PktdrpstsR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PktdrpstsR { bits } } # [ doc = "Bit 12 - Babble error interrupt" ] # [ inline ( always ) ] pub fn berr ( & self ) -> BerrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BerrR { bits } } # [ doc = "Bit 13 - NAK interrupt" ] # [ inline ( always ) ] pub fn nak ( & self ) -> NakR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NakR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Transfer completed interrupt" ] # [ inline ( always ) ] pub fn xfrc ( & mut self ) -> _XfrcW { _XfrcW { w : self } } # [ doc = "Bit 1 - Endpoint disabled interrupt" ] # [ inline ( always ) ] pub fn epdisd ( & mut self ) -> _EpdisdW { _EpdisdW { w : self } } # [ doc = "Bit 3 - Timeout condition" ] # [ inline ( always ) ] pub fn toc ( & mut self ) -> _TocW { _TocW { w : self } } # [ doc = "Bit 4 - IN token received when TxFIFO is empty" ] # [ inline ( always ) ] pub fn ittxfe ( & mut self ) -> _IttxfeW { _IttxfeW { w : self } } # [ doc = "Bit 6 - IN endpoint NAK effective" ] # [ inline ( always ) ] pub fn inepne ( & mut self ) -> _InepneW { _InepneW { w : self } } # [ doc = "Bit 8 - Transmit Fifo Underrun" ] # [ inline ( always ) ] pub fn txfifoudrn ( & mut self ) -> _TxfifoudrnW { _TxfifoudrnW { w : self } } # [ doc = "Bit 9 - Buffer not available interrupt" ] # [ inline ( always ) ] pub fn bna ( & mut self ) -> _BnaW { _BnaW { w : self } } # [ doc = "Bit 11 - Packet dropped status" ] # [ inline ( always ) ] pub fn pktdrpsts ( & mut self ) -> _PktdrpstsW { _PktdrpstsW { w : self } } # [ doc = "Bit 12 - Babble error interrupt" ] # [ inline ( always ) ] pub fn berr ( & mut self ) -> _BerrW { _BerrW { w : self } } # [ doc = "Bit 13 - NAK interrupt" ] # [ inline ( always ) ] pub fn nak ( & mut self ) -> _NakW { _NakW { w : self } } }