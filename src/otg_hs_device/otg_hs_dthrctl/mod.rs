# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: OtgHsDthrctl { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct NonisothrenR { bits : u8 } impl NonisothrenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct IsothrenR { bits : u8 } impl IsothrenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TxthrlenR { bits : u16 } impl TxthrlenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u16 { self . bits } } # [ doc = r" Value of the field" ] pub struct RxthrenR { bits : u8 } impl RxthrenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RxthrlenR { bits : u16 } impl RxthrlenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u16 { self . bits } } # [ doc = r" Value of the field" ] pub struct ArpenR { bits : u8 } impl ArpenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _NonisothrenW < 'a > { w : & 'a mut W } impl < 'a > _NonisothrenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _IsothrenW < 'a > { w : & 'a mut W } impl < 'a > _IsothrenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TxthrlenW < 'a > { w : & 'a mut W } impl < 'a > _TxthrlenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u16 ) -> & 'a mut W { const MASK : u16 = 511 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _RxthrenW < 'a > { w : & 'a mut W } impl < 'a > _RxthrenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _RxthrlenW < 'a > { w : & 'a mut W } impl < 'a > _RxthrlenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u16 ) -> & 'a mut W { const MASK : u16 = 511 ; const OFFSET : u8 = 17 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ArpenW < 'a > { w : & 'a mut W } impl < 'a > _ArpenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 27 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Nonisochronous IN endpoints threshold enable" ] # [ inline ( always ) ] pub fn nonisothren ( & self ) -> NonisothrenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NonisothrenR { bits } } # [ doc = "Bit 1 - ISO IN endpoint threshold enable" ] # [ inline ( always ) ] pub fn isothren ( & self ) -> IsothrenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; IsothrenR { bits } } # [ doc = "Bits 2:10 - Transmit threshold length" ] # [ inline ( always ) ] pub fn txthrlen ( & self ) -> TxthrlenR { let bits = { const MASK : u16 = 511 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u16 } ; TxthrlenR { bits } } # [ doc = "Bit 16 - Receive threshold enable" ] # [ inline ( always ) ] pub fn rxthren ( & self ) -> RxthrenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RxthrenR { bits } } # [ doc = "Bits 17:25 - Receive threshold length" ] # [ inline ( always ) ] pub fn rxthrlen ( & self ) -> RxthrlenR { let bits = { const MASK : u16 = 511 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u16 } ; RxthrlenR { bits } } # [ doc = "Bit 27 - Arbiter parking enable" ] # [ inline ( always ) ] pub fn arpen ( & self ) -> ArpenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 27 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ArpenR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Nonisochronous IN endpoints threshold enable" ] # [ inline ( always ) ] pub fn nonisothren ( & mut self ) -> _NonisothrenW { _NonisothrenW { w : self } } # [ doc = "Bit 1 - ISO IN endpoint threshold enable" ] # [ inline ( always ) ] pub fn isothren ( & mut self ) -> _IsothrenW { _IsothrenW { w : self } } # [ doc = "Bits 2:10 - Transmit threshold length" ] # [ inline ( always ) ] pub fn txthrlen ( & mut self ) -> _TxthrlenW { _TxthrlenW { w : self } } # [ doc = "Bit 16 - Receive threshold enable" ] # [ inline ( always ) ] pub fn rxthren ( & mut self ) -> _RxthrenW { _RxthrenW { w : self } } # [ doc = "Bits 17:25 - Receive threshold length" ] # [ inline ( always ) ] pub fn rxthrlen ( & mut self ) -> _RxthrlenW { _RxthrlenW { w : self } } # [ doc = "Bit 27 - Arbiter parking enable" ] # [ inline ( always ) ] pub fn arpen ( & mut self ) -> _ArpenW { _ArpenW { w : self } } }