# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: OtgHsDiepmsk { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct XfrcmR { bits : u8 } impl XfrcmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EpdmR { bits : u8 } impl EpdmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TomR { bits : u8 } impl TomR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct IttxfemskR { bits : u8 } impl IttxfemskR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct InepnmmR { bits : u8 } impl InepnmmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct InepnemR { bits : u8 } impl InepnemR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TxfurmR { bits : u8 } impl TxfurmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BimR { bits : u8 } impl BimR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _XfrcmW < 'a > { w : & 'a mut W } impl < 'a > _XfrcmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EpdmW < 'a > { w : & 'a mut W } impl < 'a > _EpdmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TomW < 'a > { w : & 'a mut W } impl < 'a > _TomW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _IttxfemskW < 'a > { w : & 'a mut W } impl < 'a > _IttxfemskW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _InepnmmW < 'a > { w : & 'a mut W } impl < 'a > _InepnmmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _InepnemW < 'a > { w : & 'a mut W } impl < 'a > _InepnemW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TxfurmW < 'a > { w : & 'a mut W } impl < 'a > _TxfurmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BimW < 'a > { w : & 'a mut W } impl < 'a > _BimW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Transfer completed interrupt mask" ] # [ inline ( always ) ] pub fn xfrcm ( & self ) -> XfrcmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; XfrcmR { bits } } # [ doc = "Bit 1 - Endpoint disabled interrupt mask" ] # [ inline ( always ) ] pub fn epdm ( & self ) -> EpdmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EpdmR { bits } } # [ doc = "Bit 3 - Timeout condition mask (nonisochronous endpoints)" ] # [ inline ( always ) ] pub fn tom ( & self ) -> TomR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TomR { bits } } # [ doc = "Bit 4 - IN token received when TxFIFO empty mask" ] # [ inline ( always ) ] pub fn ittxfemsk ( & self ) -> IttxfemskR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; IttxfemskR { bits } } # [ doc = "Bit 5 - IN token received with EP mismatch mask" ] # [ inline ( always ) ] pub fn inepnmm ( & self ) -> InepnmmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; InepnmmR { bits } } # [ doc = "Bit 6 - IN endpoint NAK effective mask" ] # [ inline ( always ) ] pub fn inepnem ( & self ) -> InepnemR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; InepnemR { bits } } # [ doc = "Bit 8 - FIFO underrun mask" ] # [ inline ( always ) ] pub fn txfurm ( & self ) -> TxfurmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TxfurmR { bits } } # [ doc = "Bit 9 - BNA interrupt mask" ] # [ inline ( always ) ] pub fn bim ( & self ) -> BimR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BimR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Transfer completed interrupt mask" ] # [ inline ( always ) ] pub fn xfrcm ( & mut self ) -> _XfrcmW { _XfrcmW { w : self } } # [ doc = "Bit 1 - Endpoint disabled interrupt mask" ] # [ inline ( always ) ] pub fn epdm ( & mut self ) -> _EpdmW { _EpdmW { w : self } } # [ doc = "Bit 3 - Timeout condition mask (nonisochronous endpoints)" ] # [ inline ( always ) ] pub fn tom ( & mut self ) -> _TomW { _TomW { w : self } } # [ doc = "Bit 4 - IN token received when TxFIFO empty mask" ] # [ inline ( always ) ] pub fn ittxfemsk ( & mut self ) -> _IttxfemskW { _IttxfemskW { w : self } } # [ doc = "Bit 5 - IN token received with EP mismatch mask" ] # [ inline ( always ) ] pub fn inepnmm ( & mut self ) -> _InepnmmW { _InepnmmW { w : self } } # [ doc = "Bit 6 - IN endpoint NAK effective mask" ] # [ inline ( always ) ] pub fn inepnem ( & mut self ) -> _InepnemW { _InepnemW { w : self } } # [ doc = "Bit 8 - FIFO underrun mask" ] # [ inline ( always ) ] pub fn txfurm ( & mut self ) -> _TxfurmW { _TxfurmW { w : self } } # [ doc = "Bit 9 - BNA interrupt mask" ] # [ inline ( always ) ] pub fn bim ( & mut self ) -> _BimW { _BimW { w : self } } }