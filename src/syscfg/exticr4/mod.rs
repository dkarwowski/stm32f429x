# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Exticr4 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct Exti15R { bits : u8 } impl Exti15R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Exti14R { bits : u8 } impl Exti14R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Exti13R { bits : u8 } impl Exti13R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Exti12R { bits : u8 } impl Exti12R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Exti15W < 'a > { w : & 'a mut W } impl < 'a > _Exti15W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Exti14W < 'a > { w : & 'a mut W } impl < 'a > _Exti14W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Exti13W < 'a > { w : & 'a mut W } impl < 'a > _Exti13W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Exti12W < 'a > { w : & 'a mut W } impl < 'a > _Exti12W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 12:15 - EXTI x configuration (x = 12 to 15)" ] # [ inline ( always ) ] pub fn exti15 ( & self ) -> Exti15R { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Exti15R { bits } } # [ doc = "Bits 8:11 - EXTI x configuration (x = 12 to 15)" ] # [ inline ( always ) ] pub fn exti14 ( & self ) -> Exti14R { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Exti14R { bits } } # [ doc = "Bits 4:7 - EXTI x configuration (x = 12 to 15)" ] # [ inline ( always ) ] pub fn exti13 ( & self ) -> Exti13R { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Exti13R { bits } } # [ doc = "Bits 0:3 - EXTI x configuration (x = 12 to 15)" ] # [ inline ( always ) ] pub fn exti12 ( & self ) -> Exti12R { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Exti12R { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 12:15 - EXTI x configuration (x = 12 to 15)" ] # [ inline ( always ) ] pub fn exti15 ( & mut self ) -> _Exti15W { _Exti15W { w : self } } # [ doc = "Bits 8:11 - EXTI x configuration (x = 12 to 15)" ] # [ inline ( always ) ] pub fn exti14 ( & mut self ) -> _Exti14W { _Exti14W { w : self } } # [ doc = "Bits 4:7 - EXTI x configuration (x = 12 to 15)" ] # [ inline ( always ) ] pub fn exti13 ( & mut self ) -> _Exti13W { _Exti13W { w : self } } # [ doc = "Bits 0:3 - EXTI x configuration (x = 12 to 15)" ] # [ inline ( always ) ] pub fn exti12 ( & mut self ) -> _Exti12W { _Exti12W { w : self } } }