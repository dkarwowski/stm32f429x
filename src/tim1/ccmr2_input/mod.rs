# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Ccmr2Input { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct Ic4fR { bits : u8 } impl Ic4fR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ic4pscR { bits : u8 } impl Ic4pscR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc4sR { bits : u8 } impl Cc4sR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ic3fR { bits : u8 } impl Ic3fR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ic3pscR { bits : u8 } impl Ic3pscR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc3sR { bits : u8 } impl Cc3sR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Ic4fW < 'a > { w : & 'a mut W } impl < 'a > _Ic4fW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Ic4pscW < 'a > { w : & 'a mut W } impl < 'a > _Ic4pscW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc4sW < 'a > { w : & 'a mut W } impl < 'a > _Cc4sW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Ic3fW < 'a > { w : & 'a mut W } impl < 'a > _Ic3fW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Ic3pscW < 'a > { w : & 'a mut W } impl < 'a > _Ic3pscW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc3sW < 'a > { w : & 'a mut W } impl < 'a > _Cc3sW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 12:15 - Input capture 4 filter" ] # [ inline ( always ) ] pub fn ic4f ( & self ) -> Ic4fR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ic4fR { bits } } # [ doc = "Bits 10:11 - Input capture 4 prescaler" ] # [ inline ( always ) ] pub fn ic4psc ( & self ) -> Ic4pscR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ic4pscR { bits } } # [ doc = "Bits 8:9 - Capture/Compare 4 selection" ] # [ inline ( always ) ] pub fn cc4s ( & self ) -> Cc4sR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc4sR { bits } } # [ doc = "Bits 4:7 - Input capture 3 filter" ] # [ inline ( always ) ] pub fn ic3f ( & self ) -> Ic3fR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ic3fR { bits } } # [ doc = "Bits 2:3 - Input capture 3 prescaler" ] # [ inline ( always ) ] pub fn ic3psc ( & self ) -> Ic3pscR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ic3pscR { bits } } # [ doc = "Bits 0:1 - Capture/compare 3 selection" ] # [ inline ( always ) ] pub fn cc3s ( & self ) -> Cc3sR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc3sR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 12:15 - Input capture 4 filter" ] # [ inline ( always ) ] pub fn ic4f ( & mut self ) -> _Ic4fW { _Ic4fW { w : self } } # [ doc = "Bits 10:11 - Input capture 4 prescaler" ] # [ inline ( always ) ] pub fn ic4psc ( & mut self ) -> _Ic4pscW { _Ic4pscW { w : self } } # [ doc = "Bits 8:9 - Capture/Compare 4 selection" ] # [ inline ( always ) ] pub fn cc4s ( & mut self ) -> _Cc4sW { _Cc4sW { w : self } } # [ doc = "Bits 4:7 - Input capture 3 filter" ] # [ inline ( always ) ] pub fn ic3f ( & mut self ) -> _Ic3fW { _Ic3fW { w : self } } # [ doc = "Bits 2:3 - Input capture 3 prescaler" ] # [ inline ( always ) ] pub fn ic3psc ( & mut self ) -> _Ic3pscW { _Ic3pscW { w : self } } # [ doc = "Bits 0:1 - Capture/compare 3 selection" ] # [ inline ( always ) ] pub fn cc3s ( & mut self ) -> _Cc3sW { _Cc3sW { w : self } } }