# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Dier { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct TdeR { bits : u8 } impl TdeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ComdeR { bits : u8 } impl ComdeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc4deR { bits : u8 } impl Cc4deR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc3deR { bits : u8 } impl Cc3deR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc2deR { bits : u8 } impl Cc2deR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc1deR { bits : u8 } impl Cc1deR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct UdeR { bits : u8 } impl UdeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TieR { bits : u8 } impl TieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc4ieR { bits : u8 } impl Cc4ieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc3ieR { bits : u8 } impl Cc3ieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc2ieR { bits : u8 } impl Cc2ieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc1ieR { bits : u8 } impl Cc1ieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct UieR { bits : u8 } impl UieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BieR { bits : u8 } impl BieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ComieR { bits : u8 } impl ComieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _TdeW < 'a > { w : & 'a mut W } impl < 'a > _TdeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ComdeW < 'a > { w : & 'a mut W } impl < 'a > _ComdeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc4deW < 'a > { w : & 'a mut W } impl < 'a > _Cc4deW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc3deW < 'a > { w : & 'a mut W } impl < 'a > _Cc3deW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc2deW < 'a > { w : & 'a mut W } impl < 'a > _Cc2deW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc1deW < 'a > { w : & 'a mut W } impl < 'a > _Cc1deW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _UdeW < 'a > { w : & 'a mut W } impl < 'a > _UdeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TieW < 'a > { w : & 'a mut W } impl < 'a > _TieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc4ieW < 'a > { w : & 'a mut W } impl < 'a > _Cc4ieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc3ieW < 'a > { w : & 'a mut W } impl < 'a > _Cc3ieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc2ieW < 'a > { w : & 'a mut W } impl < 'a > _Cc2ieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc1ieW < 'a > { w : & 'a mut W } impl < 'a > _Cc1ieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _UieW < 'a > { w : & 'a mut W } impl < 'a > _UieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BieW < 'a > { w : & 'a mut W } impl < 'a > _BieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ComieW < 'a > { w : & 'a mut W } impl < 'a > _ComieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 14 - Trigger DMA request enable" ] # [ inline ( always ) ] pub fn tde ( & self ) -> TdeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TdeR { bits } } # [ doc = "Bit 13 - COM DMA request enable" ] # [ inline ( always ) ] pub fn comde ( & self ) -> ComdeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ComdeR { bits } } # [ doc = "Bit 12 - Capture/Compare 4 DMA request enable" ] # [ inline ( always ) ] pub fn cc4de ( & self ) -> Cc4deR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc4deR { bits } } # [ doc = "Bit 11 - Capture/Compare 3 DMA request enable" ] # [ inline ( always ) ] pub fn cc3de ( & self ) -> Cc3deR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc3deR { bits } } # [ doc = "Bit 10 - Capture/Compare 2 DMA request enable" ] # [ inline ( always ) ] pub fn cc2de ( & self ) -> Cc2deR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc2deR { bits } } # [ doc = "Bit 9 - Capture/Compare 1 DMA request enable" ] # [ inline ( always ) ] pub fn cc1de ( & self ) -> Cc1deR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc1deR { bits } } # [ doc = "Bit 8 - Update DMA request enable" ] # [ inline ( always ) ] pub fn ude ( & self ) -> UdeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; UdeR { bits } } # [ doc = "Bit 6 - Trigger interrupt enable" ] # [ inline ( always ) ] pub fn tie ( & self ) -> TieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TieR { bits } } # [ doc = "Bit 4 - Capture/Compare 4 interrupt enable" ] # [ inline ( always ) ] pub fn cc4ie ( & self ) -> Cc4ieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc4ieR { bits } } # [ doc = "Bit 3 - Capture/Compare 3 interrupt enable" ] # [ inline ( always ) ] pub fn cc3ie ( & self ) -> Cc3ieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc3ieR { bits } } # [ doc = "Bit 2 - Capture/Compare 2 interrupt enable" ] # [ inline ( always ) ] pub fn cc2ie ( & self ) -> Cc2ieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc2ieR { bits } } # [ doc = "Bit 1 - Capture/Compare 1 interrupt enable" ] # [ inline ( always ) ] pub fn cc1ie ( & self ) -> Cc1ieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc1ieR { bits } } # [ doc = "Bit 0 - Update interrupt enable" ] # [ inline ( always ) ] pub fn uie ( & self ) -> UieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; UieR { bits } } # [ doc = "Bit 7 - Break interrupt enable" ] # [ inline ( always ) ] pub fn bie ( & self ) -> BieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BieR { bits } } # [ doc = "Bit 5 - COM interrupt enable" ] # [ inline ( always ) ] pub fn comie ( & self ) -> ComieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ComieR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 14 - Trigger DMA request enable" ] # [ inline ( always ) ] pub fn tde ( & mut self ) -> _TdeW { _TdeW { w : self } } # [ doc = "Bit 13 - COM DMA request enable" ] # [ inline ( always ) ] pub fn comde ( & mut self ) -> _ComdeW { _ComdeW { w : self } } # [ doc = "Bit 12 - Capture/Compare 4 DMA request enable" ] # [ inline ( always ) ] pub fn cc4de ( & mut self ) -> _Cc4deW { _Cc4deW { w : self } } # [ doc = "Bit 11 - Capture/Compare 3 DMA request enable" ] # [ inline ( always ) ] pub fn cc3de ( & mut self ) -> _Cc3deW { _Cc3deW { w : self } } # [ doc = "Bit 10 - Capture/Compare 2 DMA request enable" ] # [ inline ( always ) ] pub fn cc2de ( & mut self ) -> _Cc2deW { _Cc2deW { w : self } } # [ doc = "Bit 9 - Capture/Compare 1 DMA request enable" ] # [ inline ( always ) ] pub fn cc1de ( & mut self ) -> _Cc1deW { _Cc1deW { w : self } } # [ doc = "Bit 8 - Update DMA request enable" ] # [ inline ( always ) ] pub fn ude ( & mut self ) -> _UdeW { _UdeW { w : self } } # [ doc = "Bit 6 - Trigger interrupt enable" ] # [ inline ( always ) ] pub fn tie ( & mut self ) -> _TieW { _TieW { w : self } } # [ doc = "Bit 4 - Capture/Compare 4 interrupt enable" ] # [ inline ( always ) ] pub fn cc4ie ( & mut self ) -> _Cc4ieW { _Cc4ieW { w : self } } # [ doc = "Bit 3 - Capture/Compare 3 interrupt enable" ] # [ inline ( always ) ] pub fn cc3ie ( & mut self ) -> _Cc3ieW { _Cc3ieW { w : self } } # [ doc = "Bit 2 - Capture/Compare 2 interrupt enable" ] # [ inline ( always ) ] pub fn cc2ie ( & mut self ) -> _Cc2ieW { _Cc2ieW { w : self } } # [ doc = "Bit 1 - Capture/Compare 1 interrupt enable" ] # [ inline ( always ) ] pub fn cc1ie ( & mut self ) -> _Cc1ieW { _Cc1ieW { w : self } } # [ doc = "Bit 0 - Update interrupt enable" ] # [ inline ( always ) ] pub fn uie ( & mut self ) -> _UieW { _UieW { w : self } } # [ doc = "Bit 7 - Break interrupt enable" ] # [ inline ( always ) ] pub fn bie ( & mut self ) -> _BieW { _BieW { w : self } } # [ doc = "Bit 5 - COM interrupt enable" ] # [ inline ( always ) ] pub fn comie ( & mut self ) -> _ComieW { _ComieW { w : self } } }