# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Ccmr2Output { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct Oc4ceR { bits : u8 } impl Oc4ceR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Oc4mR { bits : u8 } impl Oc4mR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Oc4peR { bits : u8 } impl Oc4peR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Oc4feR { bits : u8 } impl Oc4feR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc4sR { bits : u8 } impl Cc4sR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Oc3ceR { bits : u8 } impl Oc3ceR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Oc3mR { bits : u8 } impl Oc3mR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Oc3peR { bits : u8 } impl Oc3peR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Oc3feR { bits : u8 } impl Oc3feR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc3sR { bits : u8 } impl Cc3sR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Oc4ceW < 'a > { w : & 'a mut W } impl < 'a > _Oc4ceW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Oc4mW < 'a > { w : & 'a mut W } impl < 'a > _Oc4mW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Oc4peW < 'a > { w : & 'a mut W } impl < 'a > _Oc4peW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Oc4feW < 'a > { w : & 'a mut W } impl < 'a > _Oc4feW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc4sW < 'a > { w : & 'a mut W } impl < 'a > _Cc4sW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Oc3ceW < 'a > { w : & 'a mut W } impl < 'a > _Oc3ceW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Oc3mW < 'a > { w : & 'a mut W } impl < 'a > _Oc3mW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Oc3peW < 'a > { w : & 'a mut W } impl < 'a > _Oc3peW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Oc3feW < 'a > { w : & 'a mut W } impl < 'a > _Oc3feW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc3sW < 'a > { w : & 'a mut W } impl < 'a > _Cc3sW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 15 - Output compare 4 clear enable" ] # [ inline ( always ) ] pub fn oc4ce ( & self ) -> Oc4ceR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Oc4ceR { bits } } # [ doc = "Bits 12:14 - Output compare 4 mode" ] # [ inline ( always ) ] pub fn oc4m ( & self ) -> Oc4mR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Oc4mR { bits } } # [ doc = "Bit 11 - Output compare 4 preload enable" ] # [ inline ( always ) ] pub fn oc4pe ( & self ) -> Oc4peR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Oc4peR { bits } } # [ doc = "Bit 10 - Output compare 4 fast enable" ] # [ inline ( always ) ] pub fn oc4fe ( & self ) -> Oc4feR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Oc4feR { bits } } # [ doc = "Bits 8:9 - Capture/Compare 4 selection" ] # [ inline ( always ) ] pub fn cc4s ( & self ) -> Cc4sR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc4sR { bits } } # [ doc = "Bit 7 - Output compare 3 clear enable" ] # [ inline ( always ) ] pub fn oc3ce ( & self ) -> Oc3ceR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Oc3ceR { bits } } # [ doc = "Bits 4:6 - Output compare 3 mode" ] # [ inline ( always ) ] pub fn oc3m ( & self ) -> Oc3mR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Oc3mR { bits } } # [ doc = "Bit 3 - Output compare 3 preload enable" ] # [ inline ( always ) ] pub fn oc3pe ( & self ) -> Oc3peR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Oc3peR { bits } } # [ doc = "Bit 2 - Output compare 3 fast enable" ] # [ inline ( always ) ] pub fn oc3fe ( & self ) -> Oc3feR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Oc3feR { bits } } # [ doc = "Bits 0:1 - Capture/Compare 3 selection" ] # [ inline ( always ) ] pub fn cc3s ( & self ) -> Cc3sR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc3sR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 15 - Output compare 4 clear enable" ] # [ inline ( always ) ] pub fn oc4ce ( & mut self ) -> _Oc4ceW { _Oc4ceW { w : self } } # [ doc = "Bits 12:14 - Output compare 4 mode" ] # [ inline ( always ) ] pub fn oc4m ( & mut self ) -> _Oc4mW { _Oc4mW { w : self } } # [ doc = "Bit 11 - Output compare 4 preload enable" ] # [ inline ( always ) ] pub fn oc4pe ( & mut self ) -> _Oc4peW { _Oc4peW { w : self } } # [ doc = "Bit 10 - Output compare 4 fast enable" ] # [ inline ( always ) ] pub fn oc4fe ( & mut self ) -> _Oc4feW { _Oc4feW { w : self } } # [ doc = "Bits 8:9 - Capture/Compare 4 selection" ] # [ inline ( always ) ] pub fn cc4s ( & mut self ) -> _Cc4sW { _Cc4sW { w : self } } # [ doc = "Bit 7 - Output compare 3 clear enable" ] # [ inline ( always ) ] pub fn oc3ce ( & mut self ) -> _Oc3ceW { _Oc3ceW { w : self } } # [ doc = "Bits 4:6 - Output compare 3 mode" ] # [ inline ( always ) ] pub fn oc3m ( & mut self ) -> _Oc3mW { _Oc3mW { w : self } } # [ doc = "Bit 3 - Output compare 3 preload enable" ] # [ inline ( always ) ] pub fn oc3pe ( & mut self ) -> _Oc3peW { _Oc3peW { w : self } } # [ doc = "Bit 2 - Output compare 3 fast enable" ] # [ inline ( always ) ] pub fn oc3fe ( & mut self ) -> _Oc3feW { _Oc3feW { w : self } } # [ doc = "Bits 0:1 - Capture/Compare 3 selection" ] # [ inline ( always ) ] pub fn cc3s ( & mut self ) -> _Cc3sW { _Cc3sW { w : self } } }