# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: FsHcchar3 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct MpsizR { bits : u16 } impl MpsizR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u16 { self . bits } } # [ doc = r" Value of the field" ] pub struct EpnumR { bits : u8 } impl EpnumR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EpdirR { bits : u8 } impl EpdirR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LsdevR { bits : u8 } impl LsdevR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EptypR { bits : u8 } impl EptypR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct McntR { bits : u8 } impl McntR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DadR { bits : u8 } impl DadR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct OddfrmR { bits : u8 } impl OddfrmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ChdisR { bits : u8 } impl ChdisR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ChenaR { bits : u8 } impl ChenaR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _MpsizW < 'a > { w : & 'a mut W } impl < 'a > _MpsizW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u16 ) -> & 'a mut W { const MASK : u16 = 2047 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EpnumW < 'a > { w : & 'a mut W } impl < 'a > _EpnumW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EpdirW < 'a > { w : & 'a mut W } impl < 'a > _EpdirW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LsdevW < 'a > { w : & 'a mut W } impl < 'a > _LsdevW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EptypW < 'a > { w : & 'a mut W } impl < 'a > _EptypW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 18 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _McntW < 'a > { w : & 'a mut W } impl < 'a > _McntW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 20 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DadW < 'a > { w : & 'a mut W } impl < 'a > _DadW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 127 ; const OFFSET : u8 = 22 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _OddfrmW < 'a > { w : & 'a mut W } impl < 'a > _OddfrmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 29 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ChdisW < 'a > { w : & 'a mut W } impl < 'a > _ChdisW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 30 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ChenaW < 'a > { w : & 'a mut W } impl < 'a > _ChenaW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 31 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 0:10 - Maximum packet size" ] # [ inline ( always ) ] pub fn mpsiz ( & self ) -> MpsizR { let bits = { const MASK : u16 = 2047 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u16 } ; MpsizR { bits } } # [ doc = "Bits 11:14 - Endpoint number" ] # [ inline ( always ) ] pub fn epnum ( & self ) -> EpnumR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EpnumR { bits } } # [ doc = "Bit 15 - Endpoint direction" ] # [ inline ( always ) ] pub fn epdir ( & self ) -> EpdirR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EpdirR { bits } } # [ doc = "Bit 17 - Low-speed device" ] # [ inline ( always ) ] pub fn lsdev ( & self ) -> LsdevR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LsdevR { bits } } # [ doc = "Bits 18:19 - Endpoint type" ] # [ inline ( always ) ] pub fn eptyp ( & self ) -> EptypR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EptypR { bits } } # [ doc = "Bits 20:21 - Multicount" ] # [ inline ( always ) ] pub fn mcnt ( & self ) -> McntR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; McntR { bits } } # [ doc = "Bits 22:28 - Device address" ] # [ inline ( always ) ] pub fn dad ( & self ) -> DadR { let bits = { const MASK : u8 = 127 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DadR { bits } } # [ doc = "Bit 29 - Odd frame" ] # [ inline ( always ) ] pub fn oddfrm ( & self ) -> OddfrmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 29 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; OddfrmR { bits } } # [ doc = "Bit 30 - Channel disable" ] # [ inline ( always ) ] pub fn chdis ( & self ) -> ChdisR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 30 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ChdisR { bits } } # [ doc = "Bit 31 - Channel enable" ] # [ inline ( always ) ] pub fn chena ( & self ) -> ChenaR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 31 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ChenaR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 0:10 - Maximum packet size" ] # [ inline ( always ) ] pub fn mpsiz ( & mut self ) -> _MpsizW { _MpsizW { w : self } } # [ doc = "Bits 11:14 - Endpoint number" ] # [ inline ( always ) ] pub fn epnum ( & mut self ) -> _EpnumW { _EpnumW { w : self } } # [ doc = "Bit 15 - Endpoint direction" ] # [ inline ( always ) ] pub fn epdir ( & mut self ) -> _EpdirW { _EpdirW { w : self } } # [ doc = "Bit 17 - Low-speed device" ] # [ inline ( always ) ] pub fn lsdev ( & mut self ) -> _LsdevW { _LsdevW { w : self } } # [ doc = "Bits 18:19 - Endpoint type" ] # [ inline ( always ) ] pub fn eptyp ( & mut self ) -> _EptypW { _EptypW { w : self } } # [ doc = "Bits 20:21 - Multicount" ] # [ inline ( always ) ] pub fn mcnt ( & mut self ) -> _McntW { _McntW { w : self } } # [ doc = "Bits 22:28 - Device address" ] # [ inline ( always ) ] pub fn dad ( & mut self ) -> _DadW { _DadW { w : self } } # [ doc = "Bit 29 - Odd frame" ] # [ inline ( always ) ] pub fn oddfrm ( & mut self ) -> _OddfrmW { _OddfrmW { w : self } } # [ doc = "Bit 30 - Channel disable" ] # [ inline ( always ) ] pub fn chdis ( & mut self ) -> _ChdisW { _ChdisW { w : self } } # [ doc = "Bit 31 - Channel enable" ] # [ inline ( always ) ] pub fn chena ( & mut self ) -> _ChenaW { _ChenaW { w : self } } }