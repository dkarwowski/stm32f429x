# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Cr1 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct BidimodeR { bits : u8 } impl BidimodeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BidioeR { bits : u8 } impl BidioeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CrcenR { bits : u8 } impl CrcenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CrcnextR { bits : u8 } impl CrcnextR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DffR { bits : u8 } impl DffR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RxonlyR { bits : u8 } impl RxonlyR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct SsmR { bits : u8 } impl SsmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct SsiR { bits : u8 } impl SsiR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LsbfirstR { bits : u8 } impl LsbfirstR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct SpeR { bits : u8 } impl SpeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BrR { bits : u8 } impl BrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MstrR { bits : u8 } impl MstrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CpolR { bits : u8 } impl CpolR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CphaR { bits : u8 } impl CphaR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _BidimodeW < 'a > { w : & 'a mut W } impl < 'a > _BidimodeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BidioeW < 'a > { w : & 'a mut W } impl < 'a > _BidioeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CrcenW < 'a > { w : & 'a mut W } impl < 'a > _CrcenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CrcnextW < 'a > { w : & 'a mut W } impl < 'a > _CrcnextW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DffW < 'a > { w : & 'a mut W } impl < 'a > _DffW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _RxonlyW < 'a > { w : & 'a mut W } impl < 'a > _RxonlyW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _SsmW < 'a > { w : & 'a mut W } impl < 'a > _SsmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _SsiW < 'a > { w : & 'a mut W } impl < 'a > _SsiW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LsbfirstW < 'a > { w : & 'a mut W } impl < 'a > _LsbfirstW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _SpeW < 'a > { w : & 'a mut W } impl < 'a > _SpeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BrW < 'a > { w : & 'a mut W } impl < 'a > _BrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MstrW < 'a > { w : & 'a mut W } impl < 'a > _MstrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CpolW < 'a > { w : & 'a mut W } impl < 'a > _CpolW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CphaW < 'a > { w : & 'a mut W } impl < 'a > _CphaW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 15 - Bidirectional data mode enable" ] # [ inline ( always ) ] pub fn bidimode ( & self ) -> BidimodeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BidimodeR { bits } } # [ doc = "Bit 14 - Output enable in bidirectional mode" ] # [ inline ( always ) ] pub fn bidioe ( & self ) -> BidioeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BidioeR { bits } } # [ doc = "Bit 13 - Hardware CRC calculation enable" ] # [ inline ( always ) ] pub fn crcen ( & self ) -> CrcenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CrcenR { bits } } # [ doc = "Bit 12 - CRC transfer next" ] # [ inline ( always ) ] pub fn crcnext ( & self ) -> CrcnextR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CrcnextR { bits } } # [ doc = "Bit 11 - Data frame format" ] # [ inline ( always ) ] pub fn dff ( & self ) -> DffR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DffR { bits } } # [ doc = "Bit 10 - Receive only" ] # [ inline ( always ) ] pub fn rxonly ( & self ) -> RxonlyR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RxonlyR { bits } } # [ doc = "Bit 9 - Software slave management" ] # [ inline ( always ) ] pub fn ssm ( & self ) -> SsmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; SsmR { bits } } # [ doc = "Bit 8 - Internal slave select" ] # [ inline ( always ) ] pub fn ssi ( & self ) -> SsiR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; SsiR { bits } } # [ doc = "Bit 7 - Frame format" ] # [ inline ( always ) ] pub fn lsbfirst ( & self ) -> LsbfirstR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LsbfirstR { bits } } # [ doc = "Bit 6 - SPI enable" ] # [ inline ( always ) ] pub fn spe ( & self ) -> SpeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; SpeR { bits } } # [ doc = "Bits 3:5 - Baud rate control" ] # [ inline ( always ) ] pub fn br ( & self ) -> BrR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BrR { bits } } # [ doc = "Bit 2 - Master selection" ] # [ inline ( always ) ] pub fn mstr ( & self ) -> MstrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MstrR { bits } } # [ doc = "Bit 1 - Clock polarity" ] # [ inline ( always ) ] pub fn cpol ( & self ) -> CpolR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CpolR { bits } } # [ doc = "Bit 0 - Clock phase" ] # [ inline ( always ) ] pub fn cpha ( & self ) -> CphaR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CphaR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 15 - Bidirectional data mode enable" ] # [ inline ( always ) ] pub fn bidimode ( & mut self ) -> _BidimodeW { _BidimodeW { w : self } } # [ doc = "Bit 14 - Output enable in bidirectional mode" ] # [ inline ( always ) ] pub fn bidioe ( & mut self ) -> _BidioeW { _BidioeW { w : self } } # [ doc = "Bit 13 - Hardware CRC calculation enable" ] # [ inline ( always ) ] pub fn crcen ( & mut self ) -> _CrcenW { _CrcenW { w : self } } # [ doc = "Bit 12 - CRC transfer next" ] # [ inline ( always ) ] pub fn crcnext ( & mut self ) -> _CrcnextW { _CrcnextW { w : self } } # [ doc = "Bit 11 - Data frame format" ] # [ inline ( always ) ] pub fn dff ( & mut self ) -> _DffW { _DffW { w : self } } # [ doc = "Bit 10 - Receive only" ] # [ inline ( always ) ] pub fn rxonly ( & mut self ) -> _RxonlyW { _RxonlyW { w : self } } # [ doc = "Bit 9 - Software slave management" ] # [ inline ( always ) ] pub fn ssm ( & mut self ) -> _SsmW { _SsmW { w : self } } # [ doc = "Bit 8 - Internal slave select" ] # [ inline ( always ) ] pub fn ssi ( & mut self ) -> _SsiW { _SsiW { w : self } } # [ doc = "Bit 7 - Frame format" ] # [ inline ( always ) ] pub fn lsbfirst ( & mut self ) -> _LsbfirstW { _LsbfirstW { w : self } } # [ doc = "Bit 6 - SPI enable" ] # [ inline ( always ) ] pub fn spe ( & mut self ) -> _SpeW { _SpeW { w : self } } # [ doc = "Bits 3:5 - Baud rate control" ] # [ inline ( always ) ] pub fn br ( & mut self ) -> _BrW { _BrW { w : self } } # [ doc = "Bit 2 - Master selection" ] # [ inline ( always ) ] pub fn mstr ( & mut self ) -> _MstrW { _MstrW { w : self } } # [ doc = "Bit 1 - Clock polarity" ] # [ inline ( always ) ] pub fn cpol ( & mut self ) -> _CpolW { _CpolW { w : self } } # [ doc = "Bit 0 - Clock phase" ] # [ inline ( always ) ] pub fn cpha ( & mut self ) -> _CphaW { _CphaW { w : self } } }