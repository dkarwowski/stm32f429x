# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: FsGusbcfg { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct TocalR { bits : u8 } impl TocalR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct SrpcapR { bits : u8 } impl SrpcapR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HnpcapR { bits : u8 } impl HnpcapR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TrdtR { bits : u8 } impl TrdtR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FhmodR { bits : u8 } impl FhmodR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FdmodR { bits : u8 } impl FdmodR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CtxpktR { bits : u8 } impl CtxpktR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _TocalW < 'a > { w : & 'a mut W } impl < 'a > _TocalW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PhyselW < 'a > { w : & 'a mut W } impl < 'a > _PhyselW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _SrpcapW < 'a > { w : & 'a mut W } impl < 'a > _SrpcapW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _HnpcapW < 'a > { w : & 'a mut W } impl < 'a > _HnpcapW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TrdtW < 'a > { w : & 'a mut W } impl < 'a > _TrdtW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _FhmodW < 'a > { w : & 'a mut W } impl < 'a > _FhmodW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 29 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _FdmodW < 'a > { w : & 'a mut W } impl < 'a > _FdmodW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 30 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CtxpktW < 'a > { w : & 'a mut W } impl < 'a > _CtxpktW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 31 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 0:2 - FS timeout calibration" ] # [ inline ( always ) ] pub fn tocal ( & self ) -> TocalR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TocalR { bits } } # [ doc = "Bit 8 - SRP-capable" ] # [ inline ( always ) ] pub fn srpcap ( & self ) -> SrpcapR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; SrpcapR { bits } } # [ doc = "Bit 9 - HNP-capable" ] # [ inline ( always ) ] pub fn hnpcap ( & self ) -> HnpcapR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HnpcapR { bits } } # [ doc = "Bits 10:13 - USB turnaround time" ] # [ inline ( always ) ] pub fn trdt ( & self ) -> TrdtR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TrdtR { bits } } # [ doc = "Bit 29 - Force host mode" ] # [ inline ( always ) ] pub fn fhmod ( & self ) -> FhmodR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 29 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FhmodR { bits } } # [ doc = "Bit 30 - Force device mode" ] # [ inline ( always ) ] pub fn fdmod ( & self ) -> FdmodR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 30 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FdmodR { bits } } # [ doc = "Bit 31 - Corrupt Tx packet" ] # [ inline ( always ) ] pub fn ctxpkt ( & self ) -> CtxpktR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 31 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CtxpktR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 2560 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 0:2 - FS timeout calibration" ] # [ inline ( always ) ] pub fn tocal ( & mut self ) -> _TocalW { _TocalW { w : self } } # [ doc = "Bit 6 - Full Speed serial transceiver select" ] # [ inline ( always ) ] pub fn physel ( & mut self ) -> _PhyselW { _PhyselW { w : self } } # [ doc = "Bit 8 - SRP-capable" ] # [ inline ( always ) ] pub fn srpcap ( & mut self ) -> _SrpcapW { _SrpcapW { w : self } } # [ doc = "Bit 9 - HNP-capable" ] # [ inline ( always ) ] pub fn hnpcap ( & mut self ) -> _HnpcapW { _HnpcapW { w : self } } # [ doc = "Bits 10:13 - USB turnaround time" ] # [ inline ( always ) ] pub fn trdt ( & mut self ) -> _TrdtW { _TrdtW { w : self } } # [ doc = "Bit 29 - Force host mode" ] # [ inline ( always ) ] pub fn fhmod ( & mut self ) -> _FhmodW { _FhmodW { w : self } } # [ doc = "Bit 30 - Force device mode" ] # [ inline ( always ) ] pub fn fdmod ( & mut self ) -> _FdmodW { _FdmodW { w : self } } # [ doc = "Bit 31 - Corrupt Tx packet" ] # [ inline ( always ) ] pub fn ctxpkt ( & mut self ) -> _CtxpktW { _CtxpktW { w : self } } }