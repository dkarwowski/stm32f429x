# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } impl super :: Rdh0r { # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } } # [ doc = r" Value of the field" ] pub struct Data7R { bits : u8 } impl Data7R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Data6R { bits : u8 } impl Data6R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Data5R { bits : u8 } impl Data5R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Data4R { bits : u8 } impl Data4R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 24:31 - DATA7" ] # [ inline ( always ) ] pub fn data7 ( & self ) -> Data7R { let bits = { const MASK : u8 = 255 ; const OFFSET : u8 = 24 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Data7R { bits } } # [ doc = "Bits 16:23 - DATA6" ] # [ inline ( always ) ] pub fn data6 ( & self ) -> Data6R { let bits = { const MASK : u8 = 255 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Data6R { bits } } # [ doc = "Bits 8:15 - DATA5" ] # [ inline ( always ) ] pub fn data5 ( & self ) -> Data5R { let bits = { const MASK : u8 = 255 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Data5R { bits } } # [ doc = "Bits 0:7 - DATA4" ] # [ inline ( always ) ] pub fn data4 ( & self ) -> Data4R { let bits = { const MASK : u8 = 255 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Data4R { bits } } }