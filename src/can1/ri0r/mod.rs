# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } impl super :: Ri0r { # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } } # [ doc = r" Value of the field" ] pub struct StidR { bits : u16 } impl StidR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u16 { self . bits } } # [ doc = r" Value of the field" ] pub struct ExidR { bits : u32 } impl ExidR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } } # [ doc = r" Value of the field" ] pub struct IdeR { bits : u8 } impl IdeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RtrR { bits : u8 } impl RtrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 21:31 - STID" ] # [ inline ( always ) ] pub fn stid ( & self ) -> StidR { let bits = { const MASK : u16 = 2047 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u16 } ; StidR { bits } } # [ doc = "Bits 3:20 - EXID" ] # [ inline ( always ) ] pub fn exid ( & self ) -> ExidR { let bits = { const MASK : u32 = 262143 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u32 } ; ExidR { bits } } # [ doc = "Bit 2 - IDE" ] # [ inline ( always ) ] pub fn ide ( & self ) -> IdeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; IdeR { bits } } # [ doc = "Bit 1 - RTR" ] # [ inline ( always ) ] pub fn rtr ( & self ) -> RtrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RtrR { bits } } }