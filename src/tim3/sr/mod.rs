# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Sr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct Cc4ofR { bits : u8 } impl Cc4ofR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc3ofR { bits : u8 } impl Cc3ofR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc2ofR { bits : u8 } impl Cc2ofR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc1ofR { bits : u8 } impl Cc1ofR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TifR { bits : u8 } impl TifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc4ifR { bits : u8 } impl Cc4ifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc3ifR { bits : u8 } impl Cc3ifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc2ifR { bits : u8 } impl Cc2ifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc1ifR { bits : u8 } impl Cc1ifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct UifR { bits : u8 } impl UifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Cc4ofW < 'a > { w : & 'a mut W } impl < 'a > _Cc4ofW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc3ofW < 'a > { w : & 'a mut W } impl < 'a > _Cc3ofW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc2ofW < 'a > { w : & 'a mut W } impl < 'a > _Cc2ofW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc1ofW < 'a > { w : & 'a mut W } impl < 'a > _Cc1ofW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TifW < 'a > { w : & 'a mut W } impl < 'a > _TifW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc4ifW < 'a > { w : & 'a mut W } impl < 'a > _Cc4ifW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc3ifW < 'a > { w : & 'a mut W } impl < 'a > _Cc3ifW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc2ifW < 'a > { w : & 'a mut W } impl < 'a > _Cc2ifW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc1ifW < 'a > { w : & 'a mut W } impl < 'a > _Cc1ifW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _UifW < 'a > { w : & 'a mut W } impl < 'a > _UifW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 12 - Capture/Compare 4 overcapture flag" ] # [ inline ( always ) ] pub fn cc4of ( & self ) -> Cc4ofR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc4ofR { bits } } # [ doc = "Bit 11 - Capture/Compare 3 overcapture flag" ] # [ inline ( always ) ] pub fn cc3of ( & self ) -> Cc3ofR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc3ofR { bits } } # [ doc = "Bit 10 - Capture/compare 2 overcapture flag" ] # [ inline ( always ) ] pub fn cc2of ( & self ) -> Cc2ofR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc2ofR { bits } } # [ doc = "Bit 9 - Capture/Compare 1 overcapture flag" ] # [ inline ( always ) ] pub fn cc1of ( & self ) -> Cc1ofR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc1ofR { bits } } # [ doc = "Bit 6 - Trigger interrupt flag" ] # [ inline ( always ) ] pub fn tif ( & self ) -> TifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TifR { bits } } # [ doc = "Bit 4 - Capture/Compare 4 interrupt flag" ] # [ inline ( always ) ] pub fn cc4if ( & self ) -> Cc4ifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc4ifR { bits } } # [ doc = "Bit 3 - Capture/Compare 3 interrupt flag" ] # [ inline ( always ) ] pub fn cc3if ( & self ) -> Cc3ifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc3ifR { bits } } # [ doc = "Bit 2 - Capture/Compare 2 interrupt flag" ] # [ inline ( always ) ] pub fn cc2if ( & self ) -> Cc2ifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc2ifR { bits } } # [ doc = "Bit 1 - Capture/compare 1 interrupt flag" ] # [ inline ( always ) ] pub fn cc1if ( & self ) -> Cc1ifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc1ifR { bits } } # [ doc = "Bit 0 - Update interrupt flag" ] # [ inline ( always ) ] pub fn uif ( & self ) -> UifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; UifR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 12 - Capture/Compare 4 overcapture flag" ] # [ inline ( always ) ] pub fn cc4of ( & mut self ) -> _Cc4ofW { _Cc4ofW { w : self } } # [ doc = "Bit 11 - Capture/Compare 3 overcapture flag" ] # [ inline ( always ) ] pub fn cc3of ( & mut self ) -> _Cc3ofW { _Cc3ofW { w : self } } # [ doc = "Bit 10 - Capture/compare 2 overcapture flag" ] # [ inline ( always ) ] pub fn cc2of ( & mut self ) -> _Cc2ofW { _Cc2ofW { w : self } } # [ doc = "Bit 9 - Capture/Compare 1 overcapture flag" ] # [ inline ( always ) ] pub fn cc1of ( & mut self ) -> _Cc1ofW { _Cc1ofW { w : self } } # [ doc = "Bit 6 - Trigger interrupt flag" ] # [ inline ( always ) ] pub fn tif ( & mut self ) -> _TifW { _TifW { w : self } } # [ doc = "Bit 4 - Capture/Compare 4 interrupt flag" ] # [ inline ( always ) ] pub fn cc4if ( & mut self ) -> _Cc4ifW { _Cc4ifW { w : self } } # [ doc = "Bit 3 - Capture/Compare 3 interrupt flag" ] # [ inline ( always ) ] pub fn cc3if ( & mut self ) -> _Cc3ifW { _Cc3ifW { w : self } } # [ doc = "Bit 2 - Capture/Compare 2 interrupt flag" ] # [ inline ( always ) ] pub fn cc2if ( & mut self ) -> _Cc2ifW { _Cc2ifW { w : self } } # [ doc = "Bit 1 - Capture/compare 1 interrupt flag" ] # [ inline ( always ) ] pub fn cc1if ( & mut self ) -> _Cc1ifW { _Cc1ifW { w : self } } # [ doc = "Bit 0 - Update interrupt flag" ] # [ inline ( always ) ] pub fn uif ( & mut self ) -> _UifW { _UifW { w : self } } }