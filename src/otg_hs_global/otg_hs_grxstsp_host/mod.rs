# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } impl super :: OtgHsGrxstspHost { # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } } # [ doc = r" Value of the field" ] pub struct ChnumR { bits : u8 } impl ChnumR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BcntR { bits : u16 } impl BcntR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u16 { self . bits } } # [ doc = r" Value of the field" ] pub struct DpidR { bits : u8 } impl DpidR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PktstsR { bits : u8 } impl PktstsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 0:3 - Channel number" ] # [ inline ( always ) ] pub fn chnum ( & self ) -> ChnumR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ChnumR { bits } } # [ doc = "Bits 4:14 - Byte count" ] # [ inline ( always ) ] pub fn bcnt ( & self ) -> BcntR { let bits = { const MASK : u16 = 2047 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u16 } ; BcntR { bits } } # [ doc = "Bits 15:16 - Data PID" ] # [ inline ( always ) ] pub fn dpid ( & self ) -> DpidR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DpidR { bits } } # [ doc = "Bits 17:20 - Packet status" ] # [ inline ( always ) ] pub fn pktsts ( & self ) -> PktstsR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PktstsR { bits } } }