# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: OtgHsGintsts { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct CmodR { bits : u8 } impl CmodR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MmisR { bits : u8 } impl MmisR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct OtgintR { bits : u8 } impl OtgintR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct SofR { bits : u8 } impl SofR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RxflvlR { bits : u8 } impl RxflvlR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct NptxfeR { bits : u8 } impl NptxfeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct GinakeffR { bits : u8 } impl GinakeffR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BoutnakeffR { bits : u8 } impl BoutnakeffR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EsuspR { bits : u8 } impl EsuspR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct UsbsuspR { bits : u8 } impl UsbsuspR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct UsbrstR { bits : u8 } impl UsbrstR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EnumdneR { bits : u8 } impl EnumdneR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct IsoodrpR { bits : u8 } impl IsoodrpR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EopfR { bits : u8 } impl EopfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct IepintR { bits : u8 } impl IepintR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct OepintR { bits : u8 } impl OepintR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct IisoixfrR { bits : u8 } impl IisoixfrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PxfrIncompisooutR { bits : u8 } impl PxfrIncompisooutR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DatafsuspR { bits : u8 } impl DatafsuspR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HprtintR { bits : u8 } impl HprtintR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HcintR { bits : u8 } impl HcintR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PtxfeR { bits : u8 } impl PtxfeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CidschgR { bits : u8 } impl CidschgR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DiscintR { bits : u8 } impl DiscintR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct SrqintR { bits : u8 } impl SrqintR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WkuintR { bits : u8 } impl WkuintR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _MmisW < 'a > { w : & 'a mut W } impl < 'a > _MmisW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _SofW < 'a > { w : & 'a mut W } impl < 'a > _SofW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EsuspW < 'a > { w : & 'a mut W } impl < 'a > _EsuspW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _UsbsuspW < 'a > { w : & 'a mut W } impl < 'a > _UsbsuspW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _UsbrstW < 'a > { w : & 'a mut W } impl < 'a > _UsbrstW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EnumdneW < 'a > { w : & 'a mut W } impl < 'a > _EnumdneW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _IsoodrpW < 'a > { w : & 'a mut W } impl < 'a > _IsoodrpW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EopfW < 'a > { w : & 'a mut W } impl < 'a > _EopfW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _IisoixfrW < 'a > { w : & 'a mut W } impl < 'a > _IisoixfrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PxfrIncompisooutW < 'a > { w : & 'a mut W } impl < 'a > _PxfrIncompisooutW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DatafsuspW < 'a > { w : & 'a mut W } impl < 'a > _DatafsuspW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CidschgW < 'a > { w : & 'a mut W } impl < 'a > _CidschgW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 28 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DiscintW < 'a > { w : & 'a mut W } impl < 'a > _DiscintW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 29 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _SrqintW < 'a > { w : & 'a mut W } impl < 'a > _SrqintW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 30 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WkuintW < 'a > { w : & 'a mut W } impl < 'a > _WkuintW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 31 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Current mode of operation" ] # [ inline ( always ) ] pub fn cmod ( & self ) -> CmodR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CmodR { bits } } # [ doc = "Bit 1 - Mode mismatch interrupt" ] # [ inline ( always ) ] pub fn mmis ( & self ) -> MmisR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MmisR { bits } } # [ doc = "Bit 2 - OTG interrupt" ] # [ inline ( always ) ] pub fn otgint ( & self ) -> OtgintR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; OtgintR { bits } } # [ doc = "Bit 3 - Start of frame" ] # [ inline ( always ) ] pub fn sof ( & self ) -> SofR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; SofR { bits } } # [ doc = "Bit 4 - RxFIFO nonempty" ] # [ inline ( always ) ] pub fn rxflvl ( & self ) -> RxflvlR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RxflvlR { bits } } # [ doc = "Bit 5 - Nonperiodic TxFIFO empty" ] # [ inline ( always ) ] pub fn nptxfe ( & self ) -> NptxfeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NptxfeR { bits } } # [ doc = "Bit 6 - Global IN nonperiodic NAK effective" ] # [ inline ( always ) ] pub fn ginakeff ( & self ) -> GinakeffR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; GinakeffR { bits } } # [ doc = "Bit 7 - Global OUT NAK effective" ] # [ inline ( always ) ] pub fn boutnakeff ( & self ) -> BoutnakeffR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BoutnakeffR { bits } } # [ doc = "Bit 10 - Early suspend" ] # [ inline ( always ) ] pub fn esusp ( & self ) -> EsuspR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EsuspR { bits } } # [ doc = "Bit 11 - USB suspend" ] # [ inline ( always ) ] pub fn usbsusp ( & self ) -> UsbsuspR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; UsbsuspR { bits } } # [ doc = "Bit 12 - USB reset" ] # [ inline ( always ) ] pub fn usbrst ( & self ) -> UsbrstR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; UsbrstR { bits } } # [ doc = "Bit 13 - Enumeration done" ] # [ inline ( always ) ] pub fn enumdne ( & self ) -> EnumdneR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EnumdneR { bits } } # [ doc = "Bit 14 - Isochronous OUT packet dropped interrupt" ] # [ inline ( always ) ] pub fn isoodrp ( & self ) -> IsoodrpR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; IsoodrpR { bits } } # [ doc = "Bit 15 - End of periodic frame interrupt" ] # [ inline ( always ) ] pub fn eopf ( & self ) -> EopfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EopfR { bits } } # [ doc = "Bit 18 - IN endpoint interrupt" ] # [ inline ( always ) ] pub fn iepint ( & self ) -> IepintR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; IepintR { bits } } # [ doc = "Bit 19 - OUT endpoint interrupt" ] # [ inline ( always ) ] pub fn oepint ( & self ) -> OepintR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; OepintR { bits } } # [ doc = "Bit 20 - Incomplete isochronous IN transfer" ] # [ inline ( always ) ] pub fn iisoixfr ( & self ) -> IisoixfrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; IisoixfrR { bits } } # [ doc = "Bit 21 - Incomplete periodic transfer" ] # [ inline ( always ) ] pub fn pxfr_incompisoout ( & self ) -> PxfrIncompisooutR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PxfrIncompisooutR { bits } } # [ doc = "Bit 22 - Data fetch suspended" ] # [ inline ( always ) ] pub fn datafsusp ( & self ) -> DatafsuspR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DatafsuspR { bits } } # [ doc = "Bit 24 - Host port interrupt" ] # [ inline ( always ) ] pub fn hprtint ( & self ) -> HprtintR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 24 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HprtintR { bits } } # [ doc = "Bit 25 - Host channels interrupt" ] # [ inline ( always ) ] pub fn hcint ( & self ) -> HcintR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 25 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HcintR { bits } } # [ doc = "Bit 26 - Periodic TxFIFO empty" ] # [ inline ( always ) ] pub fn ptxfe ( & self ) -> PtxfeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 26 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PtxfeR { bits } } # [ doc = "Bit 28 - Connector ID status change" ] # [ inline ( always ) ] pub fn cidschg ( & self ) -> CidschgR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 28 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CidschgR { bits } } # [ doc = "Bit 29 - Disconnect detected interrupt" ] # [ inline ( always ) ] pub fn discint ( & self ) -> DiscintR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 29 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DiscintR { bits } } # [ doc = "Bit 30 - Session request/new session detected interrupt" ] # [ inline ( always ) ] pub fn srqint ( & self ) -> SrqintR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 30 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; SrqintR { bits } } # [ doc = "Bit 31 - Resume/remote wakeup detected interrupt" ] # [ inline ( always ) ] pub fn wkuint ( & self ) -> WkuintR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 31 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WkuintR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 67108896 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 1 - Mode mismatch interrupt" ] # [ inline ( always ) ] pub fn mmis ( & mut self ) -> _MmisW { _MmisW { w : self } } # [ doc = "Bit 3 - Start of frame" ] # [ inline ( always ) ] pub fn sof ( & mut self ) -> _SofW { _SofW { w : self } } # [ doc = "Bit 10 - Early suspend" ] # [ inline ( always ) ] pub fn esusp ( & mut self ) -> _EsuspW { _EsuspW { w : self } } # [ doc = "Bit 11 - USB suspend" ] # [ inline ( always ) ] pub fn usbsusp ( & mut self ) -> _UsbsuspW { _UsbsuspW { w : self } } # [ doc = "Bit 12 - USB reset" ] # [ inline ( always ) ] pub fn usbrst ( & mut self ) -> _UsbrstW { _UsbrstW { w : self } } # [ doc = "Bit 13 - Enumeration done" ] # [ inline ( always ) ] pub fn enumdne ( & mut self ) -> _EnumdneW { _EnumdneW { w : self } } # [ doc = "Bit 14 - Isochronous OUT packet dropped interrupt" ] # [ inline ( always ) ] pub fn isoodrp ( & mut self ) -> _IsoodrpW { _IsoodrpW { w : self } } # [ doc = "Bit 15 - End of periodic frame interrupt" ] # [ inline ( always ) ] pub fn eopf ( & mut self ) -> _EopfW { _EopfW { w : self } } # [ doc = "Bit 20 - Incomplete isochronous IN transfer" ] # [ inline ( always ) ] pub fn iisoixfr ( & mut self ) -> _IisoixfrW { _IisoixfrW { w : self } } # [ doc = "Bit 21 - Incomplete periodic transfer" ] # [ inline ( always ) ] pub fn pxfr_incompisoout ( & mut self ) -> _PxfrIncompisooutW { _PxfrIncompisooutW { w : self } } # [ doc = "Bit 22 - Data fetch suspended" ] # [ inline ( always ) ] pub fn datafsusp ( & mut self ) -> _DatafsuspW { _DatafsuspW { w : self } } # [ doc = "Bit 28 - Connector ID status change" ] # [ inline ( always ) ] pub fn cidschg ( & mut self ) -> _CidschgW { _CidschgW { w : self } } # [ doc = "Bit 29 - Disconnect detected interrupt" ] # [ inline ( always ) ] pub fn discint ( & mut self ) -> _DiscintW { _DiscintW { w : self } } # [ doc = "Bit 30 - Session request/new session detected interrupt" ] # [ inline ( always ) ] pub fn srqint ( & mut self ) -> _SrqintW { _SrqintW { w : self } } # [ doc = "Bit 31 - Resume/remote wakeup detected interrupt" ] # [ inline ( always ) ] pub fn wkuint ( & mut self ) -> _WkuintW { _WkuintW { w : self } } }