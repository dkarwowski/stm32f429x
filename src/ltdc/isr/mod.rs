# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } impl super :: Isr { # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } } # [ doc = r" Value of the field" ] pub struct RrifR { bits : u8 } impl RrifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TerrifR { bits : u8 } impl TerrifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FuifR { bits : u8 } impl FuifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LifR { bits : u8 } impl LifR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 3 - Register Reload Interrupt Flag" ] # [ inline ( always ) ] pub fn rrif ( & self ) -> RrifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RrifR { bits } } # [ doc = "Bit 2 - Transfer Error interrupt flag" ] # [ inline ( always ) ] pub fn terrif ( & self ) -> TerrifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TerrifR { bits } } # [ doc = "Bit 1 - FIFO Underrun Interrupt flag" ] # [ inline ( always ) ] pub fn fuif ( & self ) -> FuifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FuifR { bits } } # [ doc = "Bit 0 - Line Interrupt flag" ] # [ inline ( always ) ] pub fn lif ( & self ) -> LifR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LifR { bits } } }