# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } impl super :: Sdsr { # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } } # [ doc = r" Value of the field" ] pub struct ReR { bits : u8 } impl ReR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Modes1R { bits : u8 } impl Modes1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Modes2R { bits : u8 } impl Modes2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BusyR { bits : u8 } impl BusyR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Refresh error flag" ] # [ inline ( always ) ] pub fn re ( & self ) -> ReR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ReR { bits } } # [ doc = "Bits 1:2 - Status Mode for Bank 1" ] # [ inline ( always ) ] pub fn modes1 ( & self ) -> Modes1R { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Modes1R { bits } } # [ doc = "Bits 3:4 - Status Mode for Bank 2" ] # [ inline ( always ) ] pub fn modes2 ( & self ) -> Modes2R { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Modes2R { bits } } # [ doc = "Bit 5 - Busy status" ] # [ inline ( always ) ] pub fn busy ( & self ) -> BusyR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BusyR { bits } } }