# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Pcr2 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct EccpsR { bits : u8 } impl EccpsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TarR { bits : u8 } impl TarR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TclrR { bits : u8 } impl TclrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EccenR { bits : u8 } impl EccenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PwidR { bits : u8 } impl PwidR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PtypR { bits : u8 } impl PtypR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PbkenR { bits : u8 } impl PbkenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PwaitenR { bits : u8 } impl PwaitenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _EccpsW < 'a > { w : & 'a mut W } impl < 'a > _EccpsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 17 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TarW < 'a > { w : & 'a mut W } impl < 'a > _TarW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TclrW < 'a > { w : & 'a mut W } impl < 'a > _TclrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EccenW < 'a > { w : & 'a mut W } impl < 'a > _EccenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PwidW < 'a > { w : & 'a mut W } impl < 'a > _PwidW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PtypW < 'a > { w : & 'a mut W } impl < 'a > _PtypW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PbkenW < 'a > { w : & 'a mut W } impl < 'a > _PbkenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PwaitenW < 'a > { w : & 'a mut W } impl < 'a > _PwaitenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 17:19 - ECCPS" ] # [ inline ( always ) ] pub fn eccps ( & self ) -> EccpsR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EccpsR { bits } } # [ doc = "Bits 13:16 - TAR" ] # [ inline ( always ) ] pub fn tar ( & self ) -> TarR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TarR { bits } } # [ doc = "Bits 9:12 - TCLR" ] # [ inline ( always ) ] pub fn tclr ( & self ) -> TclrR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TclrR { bits } } # [ doc = "Bit 6 - ECCEN" ] # [ inline ( always ) ] pub fn eccen ( & self ) -> EccenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EccenR { bits } } # [ doc = "Bits 4:5 - PWID" ] # [ inline ( always ) ] pub fn pwid ( & self ) -> PwidR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PwidR { bits } } # [ doc = "Bit 3 - PTYP" ] # [ inline ( always ) ] pub fn ptyp ( & self ) -> PtypR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PtypR { bits } } # [ doc = "Bit 2 - PBKEN" ] # [ inline ( always ) ] pub fn pbken ( & self ) -> PbkenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PbkenR { bits } } # [ doc = "Bit 1 - PWAITEN" ] # [ inline ( always ) ] pub fn pwaiten ( & self ) -> PwaitenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PwaitenR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 24 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 17:19 - ECCPS" ] # [ inline ( always ) ] pub fn eccps ( & mut self ) -> _EccpsW { _EccpsW { w : self } } # [ doc = "Bits 13:16 - TAR" ] # [ inline ( always ) ] pub fn tar ( & mut self ) -> _TarW { _TarW { w : self } } # [ doc = "Bits 9:12 - TCLR" ] # [ inline ( always ) ] pub fn tclr ( & mut self ) -> _TclrW { _TclrW { w : self } } # [ doc = "Bit 6 - ECCEN" ] # [ inline ( always ) ] pub fn eccen ( & mut self ) -> _EccenW { _EccenW { w : self } } # [ doc = "Bits 4:5 - PWID" ] # [ inline ( always ) ] pub fn pwid ( & mut self ) -> _PwidW { _PwidW { w : self } } # [ doc = "Bit 3 - PTYP" ] # [ inline ( always ) ] pub fn ptyp ( & mut self ) -> _PtypW { _PtypW { w : self } } # [ doc = "Bit 2 - PBKEN" ] # [ inline ( always ) ] pub fn pbken ( & mut self ) -> _PbkenW { _PbkenW { w : self } } # [ doc = "Bit 1 - PWAITEN" ] # [ inline ( always ) ] pub fn pwaiten ( & mut self ) -> _PwaitenW { _PwaitenW { w : self } } }