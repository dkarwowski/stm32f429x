# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Sdcr1 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct NcR { bits : u8 } impl NcR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct NrR { bits : u8 } impl NrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MwidR { bits : u8 } impl MwidR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct NbR { bits : u8 } impl NbR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CasR { bits : u8 } impl CasR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WpR { bits : u8 } impl WpR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct SdclkR { bits : u8 } impl SdclkR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RburstR { bits : u8 } impl RburstR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RpipeR { bits : u8 } impl RpipeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _NcW < 'a > { w : & 'a mut W } impl < 'a > _NcW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _NrW < 'a > { w : & 'a mut W } impl < 'a > _NrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MwidW < 'a > { w : & 'a mut W } impl < 'a > _MwidW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _NbW < 'a > { w : & 'a mut W } impl < 'a > _NbW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CasW < 'a > { w : & 'a mut W } impl < 'a > _CasW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WpW < 'a > { w : & 'a mut W } impl < 'a > _WpW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _SdclkW < 'a > { w : & 'a mut W } impl < 'a > _SdclkW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _RburstW < 'a > { w : & 'a mut W } impl < 'a > _RburstW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _RpipeW < 'a > { w : & 'a mut W } impl < 'a > _RpipeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 0:1 - Number of column address bits" ] # [ inline ( always ) ] pub fn nc ( & self ) -> NcR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NcR { bits } } # [ doc = "Bits 2:3 - Number of row address bits" ] # [ inline ( always ) ] pub fn nr ( & self ) -> NrR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NrR { bits } } # [ doc = "Bits 4:5 - Memory data bus width" ] # [ inline ( always ) ] pub fn mwid ( & self ) -> MwidR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MwidR { bits } } # [ doc = "Bit 6 - Number of internal banks" ] # [ inline ( always ) ] pub fn nb ( & self ) -> NbR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NbR { bits } } # [ doc = "Bits 7:8 - CAS latency" ] # [ inline ( always ) ] pub fn cas ( & self ) -> CasR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CasR { bits } } # [ doc = "Bit 9 - Write protection" ] # [ inline ( always ) ] pub fn wp ( & self ) -> WpR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WpR { bits } } # [ doc = "Bits 10:11 - SDRAM clock configuration" ] # [ inline ( always ) ] pub fn sdclk ( & self ) -> SdclkR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; SdclkR { bits } } # [ doc = "Bit 12 - Burst read" ] # [ inline ( always ) ] pub fn rburst ( & self ) -> RburstR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RburstR { bits } } # [ doc = "Bits 13:14 - Read pipe" ] # [ inline ( always ) ] pub fn rpipe ( & self ) -> RpipeR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RpipeR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 720 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 0:1 - Number of column address bits" ] # [ inline ( always ) ] pub fn nc ( & mut self ) -> _NcW { _NcW { w : self } } # [ doc = "Bits 2:3 - Number of row address bits" ] # [ inline ( always ) ] pub fn nr ( & mut self ) -> _NrW { _NrW { w : self } } # [ doc = "Bits 4:5 - Memory data bus width" ] # [ inline ( always ) ] pub fn mwid ( & mut self ) -> _MwidW { _MwidW { w : self } } # [ doc = "Bit 6 - Number of internal banks" ] # [ inline ( always ) ] pub fn nb ( & mut self ) -> _NbW { _NbW { w : self } } # [ doc = "Bits 7:8 - CAS latency" ] # [ inline ( always ) ] pub fn cas ( & mut self ) -> _CasW { _CasW { w : self } } # [ doc = "Bit 9 - Write protection" ] # [ inline ( always ) ] pub fn wp ( & mut self ) -> _WpW { _WpW { w : self } } # [ doc = "Bits 10:11 - SDRAM clock configuration" ] # [ inline ( always ) ] pub fn sdclk ( & mut self ) -> _SdclkW { _SdclkW { w : self } } # [ doc = "Bit 12 - Burst read" ] # [ inline ( always ) ] pub fn rburst ( & mut self ) -> _RburstW { _RburstW { w : self } } # [ doc = "Bits 13:14 - Read pipe" ] # [ inline ( always ) ] pub fn rpipe ( & mut self ) -> _RpipeW { _RpipeW { w : self } } }