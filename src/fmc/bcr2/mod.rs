# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Bcr2 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct CburstrwR { bits : u8 } impl CburstrwR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AsyncwaitR { bits : u8 } impl AsyncwaitR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ExtmodR { bits : u8 } impl ExtmodR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WaitenR { bits : u8 } impl WaitenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WrenR { bits : u8 } impl WrenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WaitcfgR { bits : u8 } impl WaitcfgR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WrapmodR { bits : u8 } impl WrapmodR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WaitpolR { bits : u8 } impl WaitpolR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BurstenR { bits : u8 } impl BurstenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FaccenR { bits : u8 } impl FaccenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MwidR { bits : u8 } impl MwidR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MtypR { bits : u8 } impl MtypR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MuxenR { bits : u8 } impl MuxenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MbkenR { bits : u8 } impl MbkenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _CburstrwW < 'a > { w : & 'a mut W } impl < 'a > _CburstrwW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AsyncwaitW < 'a > { w : & 'a mut W } impl < 'a > _AsyncwaitW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ExtmodW < 'a > { w : & 'a mut W } impl < 'a > _ExtmodW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WaitenW < 'a > { w : & 'a mut W } impl < 'a > _WaitenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WrenW < 'a > { w : & 'a mut W } impl < 'a > _WrenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WaitcfgW < 'a > { w : & 'a mut W } impl < 'a > _WaitcfgW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WrapmodW < 'a > { w : & 'a mut W } impl < 'a > _WrapmodW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WaitpolW < 'a > { w : & 'a mut W } impl < 'a > _WaitpolW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BurstenW < 'a > { w : & 'a mut W } impl < 'a > _BurstenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _FaccenW < 'a > { w : & 'a mut W } impl < 'a > _FaccenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MwidW < 'a > { w : & 'a mut W } impl < 'a > _MwidW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MtypW < 'a > { w : & 'a mut W } impl < 'a > _MtypW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MuxenW < 'a > { w : & 'a mut W } impl < 'a > _MuxenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MbkenW < 'a > { w : & 'a mut W } impl < 'a > _MbkenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 19 - CBURSTRW" ] # [ inline ( always ) ] pub fn cburstrw ( & self ) -> CburstrwR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CburstrwR { bits } } # [ doc = "Bit 15 - ASYNCWAIT" ] # [ inline ( always ) ] pub fn asyncwait ( & self ) -> AsyncwaitR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AsyncwaitR { bits } } # [ doc = "Bit 14 - EXTMOD" ] # [ inline ( always ) ] pub fn extmod ( & self ) -> ExtmodR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ExtmodR { bits } } # [ doc = "Bit 13 - WAITEN" ] # [ inline ( always ) ] pub fn waiten ( & self ) -> WaitenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WaitenR { bits } } # [ doc = "Bit 12 - WREN" ] # [ inline ( always ) ] pub fn wren ( & self ) -> WrenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WrenR { bits } } # [ doc = "Bit 11 - WAITCFG" ] # [ inline ( always ) ] pub fn waitcfg ( & self ) -> WaitcfgR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WaitcfgR { bits } } # [ doc = "Bit 10 - WRAPMOD" ] # [ inline ( always ) ] pub fn wrapmod ( & self ) -> WrapmodR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WrapmodR { bits } } # [ doc = "Bit 9 - WAITPOL" ] # [ inline ( always ) ] pub fn waitpol ( & self ) -> WaitpolR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WaitpolR { bits } } # [ doc = "Bit 8 - BURSTEN" ] # [ inline ( always ) ] pub fn bursten ( & self ) -> BurstenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BurstenR { bits } } # [ doc = "Bit 6 - FACCEN" ] # [ inline ( always ) ] pub fn faccen ( & self ) -> FaccenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FaccenR { bits } } # [ doc = "Bits 4:5 - MWID" ] # [ inline ( always ) ] pub fn mwid ( & self ) -> MwidR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MwidR { bits } } # [ doc = "Bits 2:3 - MTYP" ] # [ inline ( always ) ] pub fn mtyp ( & self ) -> MtypR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MtypR { bits } } # [ doc = "Bit 1 - MUXEN" ] # [ inline ( always ) ] pub fn muxen ( & self ) -> MuxenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MuxenR { bits } } # [ doc = "Bit 0 - MBKEN" ] # [ inline ( always ) ] pub fn mbken ( & self ) -> MbkenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MbkenR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 12496 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 19 - CBURSTRW" ] # [ inline ( always ) ] pub fn cburstrw ( & mut self ) -> _CburstrwW { _CburstrwW { w : self } } # [ doc = "Bit 15 - ASYNCWAIT" ] # [ inline ( always ) ] pub fn asyncwait ( & mut self ) -> _AsyncwaitW { _AsyncwaitW { w : self } } # [ doc = "Bit 14 - EXTMOD" ] # [ inline ( always ) ] pub fn extmod ( & mut self ) -> _ExtmodW { _ExtmodW { w : self } } # [ doc = "Bit 13 - WAITEN" ] # [ inline ( always ) ] pub fn waiten ( & mut self ) -> _WaitenW { _WaitenW { w : self } } # [ doc = "Bit 12 - WREN" ] # [ inline ( always ) ] pub fn wren ( & mut self ) -> _WrenW { _WrenW { w : self } } # [ doc = "Bit 11 - WAITCFG" ] # [ inline ( always ) ] pub fn waitcfg ( & mut self ) -> _WaitcfgW { _WaitcfgW { w : self } } # [ doc = "Bit 10 - WRAPMOD" ] # [ inline ( always ) ] pub fn wrapmod ( & mut self ) -> _WrapmodW { _WrapmodW { w : self } } # [ doc = "Bit 9 - WAITPOL" ] # [ inline ( always ) ] pub fn waitpol ( & mut self ) -> _WaitpolW { _WaitpolW { w : self } } # [ doc = "Bit 8 - BURSTEN" ] # [ inline ( always ) ] pub fn bursten ( & mut self ) -> _BurstenW { _BurstenW { w : self } } # [ doc = "Bit 6 - FACCEN" ] # [ inline ( always ) ] pub fn faccen ( & mut self ) -> _FaccenW { _FaccenW { w : self } } # [ doc = "Bits 4:5 - MWID" ] # [ inline ( always ) ] pub fn mwid ( & mut self ) -> _MwidW { _MwidW { w : self } } # [ doc = "Bits 2:3 - MTYP" ] # [ inline ( always ) ] pub fn mtyp ( & mut self ) -> _MtypW { _MtypW { w : self } } # [ doc = "Bit 1 - MUXEN" ] # [ inline ( always ) ] pub fn muxen ( & mut self ) -> _MuxenW { _MuxenW { w : self } } # [ doc = "Bit 0 - MBKEN" ] # [ inline ( always ) ] pub fn mbken ( & mut self ) -> _MbkenW { _MbkenW { w : self } } }