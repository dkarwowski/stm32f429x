# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: S3cr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct ChselR { bits : u8 } impl ChselR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MburstR { bits : u8 } impl MburstR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PburstR { bits : u8 } impl PburstR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AckR { bits : u8 } impl AckR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CtR { bits : u8 } impl CtR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbmR { bits : u8 } impl DbmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PlR { bits : u8 } impl PlR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PincosR { bits : u8 } impl PincosR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MsizeR { bits : u8 } impl MsizeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PsizeR { bits : u8 } impl PsizeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MincR { bits : u8 } impl MincR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PincR { bits : u8 } impl PincR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CircR { bits : u8 } impl CircR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DirR { bits : u8 } impl DirR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PfctrlR { bits : u8 } impl PfctrlR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TcieR { bits : u8 } impl TcieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HtieR { bits : u8 } impl HtieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TeieR { bits : u8 } impl TeieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DmeieR { bits : u8 } impl DmeieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EnR { bits : u8 } impl EnR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _ChselW < 'a > { w : & 'a mut W } impl < 'a > _ChselW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 25 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MburstW < 'a > { w : & 'a mut W } impl < 'a > _MburstW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 23 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PburstW < 'a > { w : & 'a mut W } impl < 'a > _PburstW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 21 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AckW < 'a > { w : & 'a mut W } impl < 'a > _AckW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CtW < 'a > { w : & 'a mut W } impl < 'a > _CtW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbmW < 'a > { w : & 'a mut W } impl < 'a > _DbmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PlW < 'a > { w : & 'a mut W } impl < 'a > _PlW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PincosW < 'a > { w : & 'a mut W } impl < 'a > _PincosW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MsizeW < 'a > { w : & 'a mut W } impl < 'a > _MsizeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PsizeW < 'a > { w : & 'a mut W } impl < 'a > _PsizeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MincW < 'a > { w : & 'a mut W } impl < 'a > _MincW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PincW < 'a > { w : & 'a mut W } impl < 'a > _PincW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CircW < 'a > { w : & 'a mut W } impl < 'a > _CircW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DirW < 'a > { w : & 'a mut W } impl < 'a > _DirW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PfctrlW < 'a > { w : & 'a mut W } impl < 'a > _PfctrlW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TcieW < 'a > { w : & 'a mut W } impl < 'a > _TcieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _HtieW < 'a > { w : & 'a mut W } impl < 'a > _HtieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TeieW < 'a > { w : & 'a mut W } impl < 'a > _TeieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DmeieW < 'a > { w : & 'a mut W } impl < 'a > _DmeieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EnW < 'a > { w : & 'a mut W } impl < 'a > _EnW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 25:27 - Channel selection" ] # [ inline ( always ) ] pub fn chsel ( & self ) -> ChselR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 25 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ChselR { bits } } # [ doc = "Bits 23:24 - Memory burst transfer configuration" ] # [ inline ( always ) ] pub fn mburst ( & self ) -> MburstR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 23 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MburstR { bits } } # [ doc = "Bits 21:22 - Peripheral burst transfer configuration" ] # [ inline ( always ) ] pub fn pburst ( & self ) -> PburstR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PburstR { bits } } # [ doc = "Bit 20 - ACK" ] # [ inline ( always ) ] pub fn ack ( & self ) -> AckR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AckR { bits } } # [ doc = "Bit 19 - Current target (only in double buffer mode)" ] # [ inline ( always ) ] pub fn ct ( & self ) -> CtR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CtR { bits } } # [ doc = "Bit 18 - Double buffer mode" ] # [ inline ( always ) ] pub fn dbm ( & self ) -> DbmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbmR { bits } } # [ doc = "Bits 16:17 - Priority level" ] # [ inline ( always ) ] pub fn pl ( & self ) -> PlR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PlR { bits } } # [ doc = "Bit 15 - Peripheral increment offset size" ] # [ inline ( always ) ] pub fn pincos ( & self ) -> PincosR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PincosR { bits } } # [ doc = "Bits 13:14 - Memory data size" ] # [ inline ( always ) ] pub fn msize ( & self ) -> MsizeR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MsizeR { bits } } # [ doc = "Bits 11:12 - Peripheral data size" ] # [ inline ( always ) ] pub fn psize ( & self ) -> PsizeR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PsizeR { bits } } # [ doc = "Bit 10 - Memory increment mode" ] # [ inline ( always ) ] pub fn minc ( & self ) -> MincR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MincR { bits } } # [ doc = "Bit 9 - Peripheral increment mode" ] # [ inline ( always ) ] pub fn pinc ( & self ) -> PincR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PincR { bits } } # [ doc = "Bit 8 - Circular mode" ] # [ inline ( always ) ] pub fn circ ( & self ) -> CircR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CircR { bits } } # [ doc = "Bits 6:7 - Data transfer direction" ] # [ inline ( always ) ] pub fn dir ( & self ) -> DirR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DirR { bits } } # [ doc = "Bit 5 - Peripheral flow controller" ] # [ inline ( always ) ] pub fn pfctrl ( & self ) -> PfctrlR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PfctrlR { bits } } # [ doc = "Bit 4 - Transfer complete interrupt enable" ] # [ inline ( always ) ] pub fn tcie ( & self ) -> TcieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TcieR { bits } } # [ doc = "Bit 3 - Half transfer interrupt enable" ] # [ inline ( always ) ] pub fn htie ( & self ) -> HtieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HtieR { bits } } # [ doc = "Bit 2 - Transfer error interrupt enable" ] # [ inline ( always ) ] pub fn teie ( & self ) -> TeieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TeieR { bits } } # [ doc = "Bit 1 - Direct mode error interrupt enable" ] # [ inline ( always ) ] pub fn dmeie ( & self ) -> DmeieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DmeieR { bits } } # [ doc = "Bit 0 - Stream enable / flag stream ready when read low" ] # [ inline ( always ) ] pub fn en ( & self ) -> EnR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EnR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 25:27 - Channel selection" ] # [ inline ( always ) ] pub fn chsel ( & mut self ) -> _ChselW { _ChselW { w : self } } # [ doc = "Bits 23:24 - Memory burst transfer configuration" ] # [ inline ( always ) ] pub fn mburst ( & mut self ) -> _MburstW { _MburstW { w : self } } # [ doc = "Bits 21:22 - Peripheral burst transfer configuration" ] # [ inline ( always ) ] pub fn pburst ( & mut self ) -> _PburstW { _PburstW { w : self } } # [ doc = "Bit 20 - ACK" ] # [ inline ( always ) ] pub fn ack ( & mut self ) -> _AckW { _AckW { w : self } } # [ doc = "Bit 19 - Current target (only in double buffer mode)" ] # [ inline ( always ) ] pub fn ct ( & mut self ) -> _CtW { _CtW { w : self } } # [ doc = "Bit 18 - Double buffer mode" ] # [ inline ( always ) ] pub fn dbm ( & mut self ) -> _DbmW { _DbmW { w : self } } # [ doc = "Bits 16:17 - Priority level" ] # [ inline ( always ) ] pub fn pl ( & mut self ) -> _PlW { _PlW { w : self } } # [ doc = "Bit 15 - Peripheral increment offset size" ] # [ inline ( always ) ] pub fn pincos ( & mut self ) -> _PincosW { _PincosW { w : self } } # [ doc = "Bits 13:14 - Memory data size" ] # [ inline ( always ) ] pub fn msize ( & mut self ) -> _MsizeW { _MsizeW { w : self } } # [ doc = "Bits 11:12 - Peripheral data size" ] # [ inline ( always ) ] pub fn psize ( & mut self ) -> _PsizeW { _PsizeW { w : self } } # [ doc = "Bit 10 - Memory increment mode" ] # [ inline ( always ) ] pub fn minc ( & mut self ) -> _MincW { _MincW { w : self } } # [ doc = "Bit 9 - Peripheral increment mode" ] # [ inline ( always ) ] pub fn pinc ( & mut self ) -> _PincW { _PincW { w : self } } # [ doc = "Bit 8 - Circular mode" ] # [ inline ( always ) ] pub fn circ ( & mut self ) -> _CircW { _CircW { w : self } } # [ doc = "Bits 6:7 - Data transfer direction" ] # [ inline ( always ) ] pub fn dir ( & mut self ) -> _DirW { _DirW { w : self } } # [ doc = "Bit 5 - Peripheral flow controller" ] # [ inline ( always ) ] pub fn pfctrl ( & mut self ) -> _PfctrlW { _PfctrlW { w : self } } # [ doc = "Bit 4 - Transfer complete interrupt enable" ] # [ inline ( always ) ] pub fn tcie ( & mut self ) -> _TcieW { _TcieW { w : self } } # [ doc = "Bit 3 - Half transfer interrupt enable" ] # [ inline ( always ) ] pub fn htie ( & mut self ) -> _HtieW { _HtieW { w : self } } # [ doc = "Bit 2 - Transfer error interrupt enable" ] # [ inline ( always ) ] pub fn teie ( & mut self ) -> _TeieW { _TeieW { w : self } } # [ doc = "Bit 1 - Direct mode error interrupt enable" ] # [ inline ( always ) ] pub fn dmeie ( & mut self ) -> _DmeieW { _DmeieW { w : self } } # [ doc = "Bit 0 - Stream enable / flag stream ready when read low" ] # [ inline ( always ) ] pub fn en ( & mut self ) -> _EnW { _EnW { w : self } } }