# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } impl super :: Lisr { # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } } # [ doc = r" Value of the field" ] pub struct Tcif3R { bits : u8 } impl Tcif3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Htif3R { bits : u8 } impl Htif3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Teif3R { bits : u8 } impl Teif3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Dmeif3R { bits : u8 } impl Dmeif3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Feif3R { bits : u8 } impl Feif3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tcif2R { bits : u8 } impl Tcif2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Htif2R { bits : u8 } impl Htif2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Teif2R { bits : u8 } impl Teif2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Dmeif2R { bits : u8 } impl Dmeif2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Feif2R { bits : u8 } impl Feif2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tcif1R { bits : u8 } impl Tcif1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Htif1R { bits : u8 } impl Htif1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Teif1R { bits : u8 } impl Teif1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Dmeif1R { bits : u8 } impl Dmeif1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Feif1R { bits : u8 } impl Feif1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tcif0R { bits : u8 } impl Tcif0R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Htif0R { bits : u8 } impl Htif0R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Teif0R { bits : u8 } impl Teif0R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Dmeif0R { bits : u8 } impl Dmeif0R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Feif0R { bits : u8 } impl Feif0R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 27 - Stream x transfer complete interrupt flag (x = 3..0)" ] # [ inline ( always ) ] pub fn tcif3 ( & self ) -> Tcif3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 27 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tcif3R { bits } } # [ doc = "Bit 26 - Stream x half transfer interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn htif3 ( & self ) -> Htif3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 26 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Htif3R { bits } } # [ doc = "Bit 25 - Stream x transfer error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn teif3 ( & self ) -> Teif3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 25 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Teif3R { bits } } # [ doc = "Bit 24 - Stream x direct mode error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn dmeif3 ( & self ) -> Dmeif3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 24 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Dmeif3R { bits } } # [ doc = "Bit 22 - Stream x FIFO error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn feif3 ( & self ) -> Feif3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Feif3R { bits } } # [ doc = "Bit 21 - Stream x transfer complete interrupt flag (x = 3..0)" ] # [ inline ( always ) ] pub fn tcif2 ( & self ) -> Tcif2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tcif2R { bits } } # [ doc = "Bit 20 - Stream x half transfer interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn htif2 ( & self ) -> Htif2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Htif2R { bits } } # [ doc = "Bit 19 - Stream x transfer error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn teif2 ( & self ) -> Teif2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Teif2R { bits } } # [ doc = "Bit 18 - Stream x direct mode error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn dmeif2 ( & self ) -> Dmeif2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Dmeif2R { bits } } # [ doc = "Bit 16 - Stream x FIFO error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn feif2 ( & self ) -> Feif2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Feif2R { bits } } # [ doc = "Bit 11 - Stream x transfer complete interrupt flag (x = 3..0)" ] # [ inline ( always ) ] pub fn tcif1 ( & self ) -> Tcif1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tcif1R { bits } } # [ doc = "Bit 10 - Stream x half transfer interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn htif1 ( & self ) -> Htif1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Htif1R { bits } } # [ doc = "Bit 9 - Stream x transfer error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn teif1 ( & self ) -> Teif1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Teif1R { bits } } # [ doc = "Bit 8 - Stream x direct mode error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn dmeif1 ( & self ) -> Dmeif1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Dmeif1R { bits } } # [ doc = "Bit 6 - Stream x FIFO error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn feif1 ( & self ) -> Feif1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Feif1R { bits } } # [ doc = "Bit 5 - Stream x transfer complete interrupt flag (x = 3..0)" ] # [ inline ( always ) ] pub fn tcif0 ( & self ) -> Tcif0R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tcif0R { bits } } # [ doc = "Bit 4 - Stream x half transfer interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn htif0 ( & self ) -> Htif0R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Htif0R { bits } } # [ doc = "Bit 3 - Stream x transfer error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn teif0 ( & self ) -> Teif0R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Teif0R { bits } } # [ doc = "Bit 2 - Stream x direct mode error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn dmeif0 ( & self ) -> Dmeif0R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Dmeif0R { bits } } # [ doc = "Bit 0 - Stream x FIFO error interrupt flag (x=3..0)" ] # [ inline ( always ) ] pub fn feif0 ( & self ) -> Feif0R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Feif0R { bits } } }