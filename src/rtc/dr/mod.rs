# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Dr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct YtR { bits : u8 } impl YtR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct YuR { bits : u8 } impl YuR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WduR { bits : u8 } impl WduR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MtR { bits : u8 } impl MtR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MuR { bits : u8 } impl MuR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DtR { bits : u8 } impl DtR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DuR { bits : u8 } impl DuR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _YtW < 'a > { w : & 'a mut W } impl < 'a > _YtW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 20 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _YuW < 'a > { w : & 'a mut W } impl < 'a > _YuW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WduW < 'a > { w : & 'a mut W } impl < 'a > _WduW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MtW < 'a > { w : & 'a mut W } impl < 'a > _MtW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MuW < 'a > { w : & 'a mut W } impl < 'a > _MuW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DtW < 'a > { w : & 'a mut W } impl < 'a > _DtW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DuW < 'a > { w : & 'a mut W } impl < 'a > _DuW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 20:23 - Year tens in BCD format" ] # [ inline ( always ) ] pub fn yt ( & self ) -> YtR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; YtR { bits } } # [ doc = "Bits 16:19 - Year units in BCD format" ] # [ inline ( always ) ] pub fn yu ( & self ) -> YuR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; YuR { bits } } # [ doc = "Bits 13:15 - Week day units" ] # [ inline ( always ) ] pub fn wdu ( & self ) -> WduR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WduR { bits } } # [ doc = "Bit 12 - Month tens in BCD format" ] # [ inline ( always ) ] pub fn mt ( & self ) -> MtR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MtR { bits } } # [ doc = "Bits 8:11 - Month units in BCD format" ] # [ inline ( always ) ] pub fn mu ( & self ) -> MuR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MuR { bits } } # [ doc = "Bits 4:5 - Date tens in BCD format" ] # [ inline ( always ) ] pub fn dt ( & self ) -> DtR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DtR { bits } } # [ doc = "Bits 0:3 - Date units in BCD format" ] # [ inline ( always ) ] pub fn du ( & self ) -> DuR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DuR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 8449 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 20:23 - Year tens in BCD format" ] # [ inline ( always ) ] pub fn yt ( & mut self ) -> _YtW { _YtW { w : self } } # [ doc = "Bits 16:19 - Year units in BCD format" ] # [ inline ( always ) ] pub fn yu ( & mut self ) -> _YuW { _YuW { w : self } } # [ doc = "Bits 13:15 - Week day units" ] # [ inline ( always ) ] pub fn wdu ( & mut self ) -> _WduW { _WduW { w : self } } # [ doc = "Bit 12 - Month tens in BCD format" ] # [ inline ( always ) ] pub fn mt ( & mut self ) -> _MtW { _MtW { w : self } } # [ doc = "Bits 8:11 - Month units in BCD format" ] # [ inline ( always ) ] pub fn mu ( & mut self ) -> _MuW { _MuW { w : self } } # [ doc = "Bits 4:5 - Date tens in BCD format" ] # [ inline ( always ) ] pub fn dt ( & mut self ) -> _DtW { _DtW { w : self } } # [ doc = "Bits 0:3 - Date units in BCD format" ] # [ inline ( always ) ] pub fn du ( & mut self ) -> _DuW { _DuW { w : self } } }