# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } impl super :: Tsdr { # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } } # [ doc = r" Value of the field" ] pub struct WduR { bits : u8 } impl WduR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MtR { bits : u8 } impl MtR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MuR { bits : u8 } impl MuR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DtR { bits : u8 } impl DtR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DuR { bits : u8 } impl DuR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 13:15 - Week day units" ] # [ inline ( always ) ] pub fn wdu ( & self ) -> WduR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WduR { bits } } # [ doc = "Bit 12 - Month tens in BCD format" ] # [ inline ( always ) ] pub fn mt ( & self ) -> MtR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MtR { bits } } # [ doc = "Bits 8:11 - Month units in BCD format" ] # [ inline ( always ) ] pub fn mu ( & self ) -> MuR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MuR { bits } } # [ doc = "Bits 4:5 - Date tens in BCD format" ] # [ inline ( always ) ] pub fn dt ( & self ) -> DtR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DtR { bits } } # [ doc = "Bits 0:3 - Date units in BCD format" ] # [ inline ( always ) ] pub fn du ( & self ) -> DuR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DuR { bits } } }