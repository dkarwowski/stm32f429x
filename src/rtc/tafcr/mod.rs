# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Tafcr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct AlarmouttypeR { bits : u8 } impl AlarmouttypeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TsinselR { bits : u8 } impl TsinselR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tamp1inselR { bits : u8 } impl Tamp1inselR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TamppudisR { bits : u8 } impl TamppudisR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TampprchR { bits : u8 } impl TampprchR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TampfltR { bits : u8 } impl TampfltR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TampfreqR { bits : u8 } impl TampfreqR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TamptsR { bits : u8 } impl TamptsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tamp2trgR { bits : u8 } impl Tamp2trgR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tamp2eR { bits : u8 } impl Tamp2eR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TampieR { bits : u8 } impl TampieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tamp1trgR { bits : u8 } impl Tamp1trgR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tamp1eR { bits : u8 } impl Tamp1eR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _AlarmouttypeW < 'a > { w : & 'a mut W } impl < 'a > _AlarmouttypeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TsinselW < 'a > { w : & 'a mut W } impl < 'a > _TsinselW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Tamp1inselW < 'a > { w : & 'a mut W } impl < 'a > _Tamp1inselW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TamppudisW < 'a > { w : & 'a mut W } impl < 'a > _TamppudisW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TampprchW < 'a > { w : & 'a mut W } impl < 'a > _TampprchW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TampfltW < 'a > { w : & 'a mut W } impl < 'a > _TampfltW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TampfreqW < 'a > { w : & 'a mut W } impl < 'a > _TampfreqW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TamptsW < 'a > { w : & 'a mut W } impl < 'a > _TamptsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Tamp2trgW < 'a > { w : & 'a mut W } impl < 'a > _Tamp2trgW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Tamp2eW < 'a > { w : & 'a mut W } impl < 'a > _Tamp2eW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TampieW < 'a > { w : & 'a mut W } impl < 'a > _TampieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Tamp1trgW < 'a > { w : & 'a mut W } impl < 'a > _Tamp1trgW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Tamp1eW < 'a > { w : & 'a mut W } impl < 'a > _Tamp1eW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 18 - AFO_ALARM output type" ] # [ inline ( always ) ] pub fn alarmouttype ( & self ) -> AlarmouttypeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AlarmouttypeR { bits } } # [ doc = "Bit 17 - TIMESTAMP mapping" ] # [ inline ( always ) ] pub fn tsinsel ( & self ) -> TsinselR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TsinselR { bits } } # [ doc = "Bit 16 - TAMPER1 mapping" ] # [ inline ( always ) ] pub fn tamp1insel ( & self ) -> Tamp1inselR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tamp1inselR { bits } } # [ doc = "Bit 15 - TAMPER pull-up disable" ] # [ inline ( always ) ] pub fn tamppudis ( & self ) -> TamppudisR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TamppudisR { bits } } # [ doc = "Bits 13:14 - Tamper precharge duration" ] # [ inline ( always ) ] pub fn tampprch ( & self ) -> TampprchR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TampprchR { bits } } # [ doc = "Bits 11:12 - Tamper filter count" ] # [ inline ( always ) ] pub fn tampflt ( & self ) -> TampfltR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TampfltR { bits } } # [ doc = "Bits 8:10 - Tamper sampling frequency" ] # [ inline ( always ) ] pub fn tampfreq ( & self ) -> TampfreqR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TampfreqR { bits } } # [ doc = "Bit 7 - Activate timestamp on tamper detection event" ] # [ inline ( always ) ] pub fn tampts ( & self ) -> TamptsR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TamptsR { bits } } # [ doc = "Bit 4 - Active level for tamper 2" ] # [ inline ( always ) ] pub fn tamp2trg ( & self ) -> Tamp2trgR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tamp2trgR { bits } } # [ doc = "Bit 3 - Tamper 2 detection enable" ] # [ inline ( always ) ] pub fn tamp2e ( & self ) -> Tamp2eR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tamp2eR { bits } } # [ doc = "Bit 2 - Tamper interrupt enable" ] # [ inline ( always ) ] pub fn tampie ( & self ) -> TampieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TampieR { bits } } # [ doc = "Bit 1 - Active level for tamper 1" ] # [ inline ( always ) ] pub fn tamp1trg ( & self ) -> Tamp1trgR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tamp1trgR { bits } } # [ doc = "Bit 0 - Tamper 1 detection enable" ] # [ inline ( always ) ] pub fn tamp1e ( & self ) -> Tamp1eR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tamp1eR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 18 - AFO_ALARM output type" ] # [ inline ( always ) ] pub fn alarmouttype ( & mut self ) -> _AlarmouttypeW { _AlarmouttypeW { w : self } } # [ doc = "Bit 17 - TIMESTAMP mapping" ] # [ inline ( always ) ] pub fn tsinsel ( & mut self ) -> _TsinselW { _TsinselW { w : self } } # [ doc = "Bit 16 - TAMPER1 mapping" ] # [ inline ( always ) ] pub fn tamp1insel ( & mut self ) -> _Tamp1inselW { _Tamp1inselW { w : self } } # [ doc = "Bit 15 - TAMPER pull-up disable" ] # [ inline ( always ) ] pub fn tamppudis ( & mut self ) -> _TamppudisW { _TamppudisW { w : self } } # [ doc = "Bits 13:14 - Tamper precharge duration" ] # [ inline ( always ) ] pub fn tampprch ( & mut self ) -> _TampprchW { _TampprchW { w : self } } # [ doc = "Bits 11:12 - Tamper filter count" ] # [ inline ( always ) ] pub fn tampflt ( & mut self ) -> _TampfltW { _TampfltW { w : self } } # [ doc = "Bits 8:10 - Tamper sampling frequency" ] # [ inline ( always ) ] pub fn tampfreq ( & mut self ) -> _TampfreqW { _TampfreqW { w : self } } # [ doc = "Bit 7 - Activate timestamp on tamper detection event" ] # [ inline ( always ) ] pub fn tampts ( & mut self ) -> _TamptsW { _TamptsW { w : self } } # [ doc = "Bit 4 - Active level for tamper 2" ] # [ inline ( always ) ] pub fn tamp2trg ( & mut self ) -> _Tamp2trgW { _Tamp2trgW { w : self } } # [ doc = "Bit 3 - Tamper 2 detection enable" ] # [ inline ( always ) ] pub fn tamp2e ( & mut self ) -> _Tamp2eW { _Tamp2eW { w : self } } # [ doc = "Bit 2 - Tamper interrupt enable" ] # [ inline ( always ) ] pub fn tampie ( & mut self ) -> _TampieW { _TampieW { w : self } } # [ doc = "Bit 1 - Active level for tamper 1" ] # [ inline ( always ) ] pub fn tamp1trg ( & mut self ) -> _Tamp1trgW { _Tamp1trgW { w : self } } # [ doc = "Bit 0 - Tamper 1 detection enable" ] # [ inline ( always ) ] pub fn tamp1e ( & mut self ) -> _Tamp1eW { _Tamp1eW { w : self } } }