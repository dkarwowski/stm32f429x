# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Cr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct CoeR { bits : u8 } impl CoeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct OselR { bits : u8 } impl OselR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PolR { bits : u8 } impl PolR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BkpR { bits : u8 } impl BkpR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Sub1hR { bits : u8 } impl Sub1hR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Add1hR { bits : u8 } impl Add1hR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TsieR { bits : u8 } impl TsieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WutieR { bits : u8 } impl WutieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AlrbieR { bits : u8 } impl AlrbieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AlraieR { bits : u8 } impl AlraieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TseR { bits : u8 } impl TseR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WuteR { bits : u8 } impl WuteR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AlrbeR { bits : u8 } impl AlrbeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AlraeR { bits : u8 } impl AlraeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DceR { bits : u8 } impl DceR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FmtR { bits : u8 } impl FmtR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RefckonR { bits : u8 } impl RefckonR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TsedgeR { bits : u8 } impl TsedgeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WckselR { bits : u8 } impl WckselR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _CoeW < 'a > { w : & 'a mut W } impl < 'a > _CoeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 23 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _OselW < 'a > { w : & 'a mut W } impl < 'a > _OselW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 21 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PolW < 'a > { w : & 'a mut W } impl < 'a > _PolW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BkpW < 'a > { w : & 'a mut W } impl < 'a > _BkpW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Sub1hW < 'a > { w : & 'a mut W } impl < 'a > _Sub1hW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Add1hW < 'a > { w : & 'a mut W } impl < 'a > _Add1hW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TsieW < 'a > { w : & 'a mut W } impl < 'a > _TsieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WutieW < 'a > { w : & 'a mut W } impl < 'a > _WutieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AlrbieW < 'a > { w : & 'a mut W } impl < 'a > _AlrbieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AlraieW < 'a > { w : & 'a mut W } impl < 'a > _AlraieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TseW < 'a > { w : & 'a mut W } impl < 'a > _TseW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WuteW < 'a > { w : & 'a mut W } impl < 'a > _WuteW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AlrbeW < 'a > { w : & 'a mut W } impl < 'a > _AlrbeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AlraeW < 'a > { w : & 'a mut W } impl < 'a > _AlraeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DceW < 'a > { w : & 'a mut W } impl < 'a > _DceW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _FmtW < 'a > { w : & 'a mut W } impl < 'a > _FmtW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _RefckonW < 'a > { w : & 'a mut W } impl < 'a > _RefckonW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TsedgeW < 'a > { w : & 'a mut W } impl < 'a > _TsedgeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WckselW < 'a > { w : & 'a mut W } impl < 'a > _WckselW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 23 - Calibration output enable" ] # [ inline ( always ) ] pub fn coe ( & self ) -> CoeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 23 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CoeR { bits } } # [ doc = "Bits 21:22 - Output selection" ] # [ inline ( always ) ] pub fn osel ( & self ) -> OselR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; OselR { bits } } # [ doc = "Bit 20 - Output polarity" ] # [ inline ( always ) ] pub fn pol ( & self ) -> PolR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PolR { bits } } # [ doc = "Bit 18 - Backup" ] # [ inline ( always ) ] pub fn bkp ( & self ) -> BkpR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BkpR { bits } } # [ doc = "Bit 17 - Subtract 1 hour (winter time change)" ] # [ inline ( always ) ] pub fn sub1h ( & self ) -> Sub1hR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Sub1hR { bits } } # [ doc = "Bit 16 - Add 1 hour (summer time change)" ] # [ inline ( always ) ] pub fn add1h ( & self ) -> Add1hR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Add1hR { bits } } # [ doc = "Bit 15 - Time-stamp interrupt enable" ] # [ inline ( always ) ] pub fn tsie ( & self ) -> TsieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TsieR { bits } } # [ doc = "Bit 14 - Wakeup timer interrupt enable" ] # [ inline ( always ) ] pub fn wutie ( & self ) -> WutieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WutieR { bits } } # [ doc = "Bit 13 - Alarm B interrupt enable" ] # [ inline ( always ) ] pub fn alrbie ( & self ) -> AlrbieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AlrbieR { bits } } # [ doc = "Bit 12 - Alarm A interrupt enable" ] # [ inline ( always ) ] pub fn alraie ( & self ) -> AlraieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AlraieR { bits } } # [ doc = "Bit 11 - Time stamp enable" ] # [ inline ( always ) ] pub fn tse ( & self ) -> TseR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TseR { bits } } # [ doc = "Bit 10 - Wakeup timer enable" ] # [ inline ( always ) ] pub fn wute ( & self ) -> WuteR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WuteR { bits } } # [ doc = "Bit 9 - Alarm B enable" ] # [ inline ( always ) ] pub fn alrbe ( & self ) -> AlrbeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AlrbeR { bits } } # [ doc = "Bit 8 - Alarm A enable" ] # [ inline ( always ) ] pub fn alrae ( & self ) -> AlraeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AlraeR { bits } } # [ doc = "Bit 7 - Coarse digital calibration enable" ] # [ inline ( always ) ] pub fn dce ( & self ) -> DceR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DceR { bits } } # [ doc = "Bit 6 - Hour format" ] # [ inline ( always ) ] pub fn fmt ( & self ) -> FmtR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FmtR { bits } } # [ doc = "Bit 4 - Reference clock detection enable (50 or 60 Hz)" ] # [ inline ( always ) ] pub fn refckon ( & self ) -> RefckonR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RefckonR { bits } } # [ doc = "Bit 3 - Time-stamp event active edge" ] # [ inline ( always ) ] pub fn tsedge ( & self ) -> TsedgeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TsedgeR { bits } } # [ doc = "Bits 0:2 - Wakeup clock selection" ] # [ inline ( always ) ] pub fn wcksel ( & self ) -> WckselR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WckselR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 23 - Calibration output enable" ] # [ inline ( always ) ] pub fn coe ( & mut self ) -> _CoeW { _CoeW { w : self } } # [ doc = "Bits 21:22 - Output selection" ] # [ inline ( always ) ] pub fn osel ( & mut self ) -> _OselW { _OselW { w : self } } # [ doc = "Bit 20 - Output polarity" ] # [ inline ( always ) ] pub fn pol ( & mut self ) -> _PolW { _PolW { w : self } } # [ doc = "Bit 18 - Backup" ] # [ inline ( always ) ] pub fn bkp ( & mut self ) -> _BkpW { _BkpW { w : self } } # [ doc = "Bit 17 - Subtract 1 hour (winter time change)" ] # [ inline ( always ) ] pub fn sub1h ( & mut self ) -> _Sub1hW { _Sub1hW { w : self } } # [ doc = "Bit 16 - Add 1 hour (summer time change)" ] # [ inline ( always ) ] pub fn add1h ( & mut self ) -> _Add1hW { _Add1hW { w : self } } # [ doc = "Bit 15 - Time-stamp interrupt enable" ] # [ inline ( always ) ] pub fn tsie ( & mut self ) -> _TsieW { _TsieW { w : self } } # [ doc = "Bit 14 - Wakeup timer interrupt enable" ] # [ inline ( always ) ] pub fn wutie ( & mut self ) -> _WutieW { _WutieW { w : self } } # [ doc = "Bit 13 - Alarm B interrupt enable" ] # [ inline ( always ) ] pub fn alrbie ( & mut self ) -> _AlrbieW { _AlrbieW { w : self } } # [ doc = "Bit 12 - Alarm A interrupt enable" ] # [ inline ( always ) ] pub fn alraie ( & mut self ) -> _AlraieW { _AlraieW { w : self } } # [ doc = "Bit 11 - Time stamp enable" ] # [ inline ( always ) ] pub fn tse ( & mut self ) -> _TseW { _TseW { w : self } } # [ doc = "Bit 10 - Wakeup timer enable" ] # [ inline ( always ) ] pub fn wute ( & mut self ) -> _WuteW { _WuteW { w : self } } # [ doc = "Bit 9 - Alarm B enable" ] # [ inline ( always ) ] pub fn alrbe ( & mut self ) -> _AlrbeW { _AlrbeW { w : self } } # [ doc = "Bit 8 - Alarm A enable" ] # [ inline ( always ) ] pub fn alrae ( & mut self ) -> _AlraeW { _AlraeW { w : self } } # [ doc = "Bit 7 - Coarse digital calibration enable" ] # [ inline ( always ) ] pub fn dce ( & mut self ) -> _DceW { _DceW { w : self } } # [ doc = "Bit 6 - Hour format" ] # [ inline ( always ) ] pub fn fmt ( & mut self ) -> _FmtW { _FmtW { w : self } } # [ doc = "Bit 4 - Reference clock detection enable (50 or 60 Hz)" ] # [ inline ( always ) ] pub fn refckon ( & mut self ) -> _RefckonW { _RefckonW { w : self } } # [ doc = "Bit 3 - Time-stamp event active edge" ] # [ inline ( always ) ] pub fn tsedge ( & mut self ) -> _TsedgeW { _TsedgeW { w : self } } # [ doc = "Bits 0:2 - Wakeup clock selection" ] # [ inline ( always ) ] pub fn wcksel ( & mut self ) -> _WckselW { _WckselW { w : self } } }