# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: OtgHsHcint1 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct XfrcR { bits : u8 } impl XfrcR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ChhR { bits : u8 } impl ChhR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AhberrR { bits : u8 } impl AhberrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct StallR { bits : u8 } impl StallR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct NakR { bits : u8 } impl NakR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AckR { bits : u8 } impl AckR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct NyetR { bits : u8 } impl NyetR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TxerrR { bits : u8 } impl TxerrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BberrR { bits : u8 } impl BberrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FrmorR { bits : u8 } impl FrmorR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DterrR { bits : u8 } impl DterrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _XfrcW < 'a > { w : & 'a mut W } impl < 'a > _XfrcW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ChhW < 'a > { w : & 'a mut W } impl < 'a > _ChhW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AhberrW < 'a > { w : & 'a mut W } impl < 'a > _AhberrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _StallW < 'a > { w : & 'a mut W } impl < 'a > _StallW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _NakW < 'a > { w : & 'a mut W } impl < 'a > _NakW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AckW < 'a > { w : & 'a mut W } impl < 'a > _AckW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _NyetW < 'a > { w : & 'a mut W } impl < 'a > _NyetW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TxerrW < 'a > { w : & 'a mut W } impl < 'a > _TxerrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BberrW < 'a > { w : & 'a mut W } impl < 'a > _BberrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _FrmorW < 'a > { w : & 'a mut W } impl < 'a > _FrmorW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DterrW < 'a > { w : & 'a mut W } impl < 'a > _DterrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Transfer completed" ] # [ inline ( always ) ] pub fn xfrc ( & self ) -> XfrcR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; XfrcR { bits } } # [ doc = "Bit 1 - Channel halted" ] # [ inline ( always ) ] pub fn chh ( & self ) -> ChhR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ChhR { bits } } # [ doc = "Bit 2 - AHB error" ] # [ inline ( always ) ] pub fn ahberr ( & self ) -> AhberrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AhberrR { bits } } # [ doc = "Bit 3 - STALL response received interrupt" ] # [ inline ( always ) ] pub fn stall ( & self ) -> StallR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; StallR { bits } } # [ doc = "Bit 4 - NAK response received interrupt" ] # [ inline ( always ) ] pub fn nak ( & self ) -> NakR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NakR { bits } } # [ doc = "Bit 5 - ACK response received/transmitted interrupt" ] # [ inline ( always ) ] pub fn ack ( & self ) -> AckR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AckR { bits } } # [ doc = "Bit 6 - Response received interrupt" ] # [ inline ( always ) ] pub fn nyet ( & self ) -> NyetR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NyetR { bits } } # [ doc = "Bit 7 - Transaction error" ] # [ inline ( always ) ] pub fn txerr ( & self ) -> TxerrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TxerrR { bits } } # [ doc = "Bit 8 - Babble error" ] # [ inline ( always ) ] pub fn bberr ( & self ) -> BberrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BberrR { bits } } # [ doc = "Bit 9 - Frame overrun" ] # [ inline ( always ) ] pub fn frmor ( & self ) -> FrmorR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FrmorR { bits } } # [ doc = "Bit 10 - Data toggle error" ] # [ inline ( always ) ] pub fn dterr ( & self ) -> DterrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DterrR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Transfer completed" ] # [ inline ( always ) ] pub fn xfrc ( & mut self ) -> _XfrcW { _XfrcW { w : self } } # [ doc = "Bit 1 - Channel halted" ] # [ inline ( always ) ] pub fn chh ( & mut self ) -> _ChhW { _ChhW { w : self } } # [ doc = "Bit 2 - AHB error" ] # [ inline ( always ) ] pub fn ahberr ( & mut self ) -> _AhberrW { _AhberrW { w : self } } # [ doc = "Bit 3 - STALL response received interrupt" ] # [ inline ( always ) ] pub fn stall ( & mut self ) -> _StallW { _StallW { w : self } } # [ doc = "Bit 4 - NAK response received interrupt" ] # [ inline ( always ) ] pub fn nak ( & mut self ) -> _NakW { _NakW { w : self } } # [ doc = "Bit 5 - ACK response received/transmitted interrupt" ] # [ inline ( always ) ] pub fn ack ( & mut self ) -> _AckW { _AckW { w : self } } # [ doc = "Bit 6 - Response received interrupt" ] # [ inline ( always ) ] pub fn nyet ( & mut self ) -> _NyetW { _NyetW { w : self } } # [ doc = "Bit 7 - Transaction error" ] # [ inline ( always ) ] pub fn txerr ( & mut self ) -> _TxerrW { _TxerrW { w : self } } # [ doc = "Bit 8 - Babble error" ] # [ inline ( always ) ] pub fn bberr ( & mut self ) -> _BberrW { _BberrW { w : self } } # [ doc = "Bit 9 - Frame overrun" ] # [ inline ( always ) ] pub fn frmor ( & mut self ) -> _FrmorW { _FrmorW { w : self } } # [ doc = "Bit 10 - Data toggle error" ] # [ inline ( always ) ] pub fn dterr ( & mut self ) -> _DterrW { _DterrW { w : self } } }