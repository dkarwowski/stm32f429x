# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: OtgHsHcintmsk9 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct XfrcmR { bits : u8 } impl XfrcmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ChhmR { bits : u8 } impl ChhmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AhberrR { bits : u8 } impl AhberrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct StallmR { bits : u8 } impl StallmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct NakmR { bits : u8 } impl NakmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AckmR { bits : u8 } impl AckmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct NyetR { bits : u8 } impl NyetR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TxerrmR { bits : u8 } impl TxerrmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BberrmR { bits : u8 } impl BberrmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FrmormR { bits : u8 } impl FrmormR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DterrmR { bits : u8 } impl DterrmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _XfrcmW < 'a > { w : & 'a mut W } impl < 'a > _XfrcmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ChhmW < 'a > { w : & 'a mut W } impl < 'a > _ChhmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AhberrW < 'a > { w : & 'a mut W } impl < 'a > _AhberrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _StallmW < 'a > { w : & 'a mut W } impl < 'a > _StallmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _NakmW < 'a > { w : & 'a mut W } impl < 'a > _NakmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AckmW < 'a > { w : & 'a mut W } impl < 'a > _AckmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _NyetW < 'a > { w : & 'a mut W } impl < 'a > _NyetW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TxerrmW < 'a > { w : & 'a mut W } impl < 'a > _TxerrmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BberrmW < 'a > { w : & 'a mut W } impl < 'a > _BberrmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _FrmormW < 'a > { w : & 'a mut W } impl < 'a > _FrmormW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DterrmW < 'a > { w : & 'a mut W } impl < 'a > _DterrmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Transfer completed mask" ] # [ inline ( always ) ] pub fn xfrcm ( & self ) -> XfrcmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; XfrcmR { bits } } # [ doc = "Bit 1 - Channel halted mask" ] # [ inline ( always ) ] pub fn chhm ( & self ) -> ChhmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ChhmR { bits } } # [ doc = "Bit 2 - AHB error" ] # [ inline ( always ) ] pub fn ahberr ( & self ) -> AhberrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AhberrR { bits } } # [ doc = "Bit 3 - STALL response received interrupt mask" ] # [ inline ( always ) ] pub fn stallm ( & self ) -> StallmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; StallmR { bits } } # [ doc = "Bit 4 - NAK response received interrupt mask" ] # [ inline ( always ) ] pub fn nakm ( & self ) -> NakmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NakmR { bits } } # [ doc = "Bit 5 - ACK response received/transmitted interrupt mask" ] # [ inline ( always ) ] pub fn ackm ( & self ) -> AckmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AckmR { bits } } # [ doc = "Bit 6 - response received interrupt mask" ] # [ inline ( always ) ] pub fn nyet ( & self ) -> NyetR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NyetR { bits } } # [ doc = "Bit 7 - Transaction error mask" ] # [ inline ( always ) ] pub fn txerrm ( & self ) -> TxerrmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TxerrmR { bits } } # [ doc = "Bit 8 - Babble error mask" ] # [ inline ( always ) ] pub fn bberrm ( & self ) -> BberrmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BberrmR { bits } } # [ doc = "Bit 9 - Frame overrun mask" ] # [ inline ( always ) ] pub fn frmorm ( & self ) -> FrmormR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FrmormR { bits } } # [ doc = "Bit 10 - Data toggle error mask" ] # [ inline ( always ) ] pub fn dterrm ( & self ) -> DterrmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DterrmR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Transfer completed mask" ] # [ inline ( always ) ] pub fn xfrcm ( & mut self ) -> _XfrcmW { _XfrcmW { w : self } } # [ doc = "Bit 1 - Channel halted mask" ] # [ inline ( always ) ] pub fn chhm ( & mut self ) -> _ChhmW { _ChhmW { w : self } } # [ doc = "Bit 2 - AHB error" ] # [ inline ( always ) ] pub fn ahberr ( & mut self ) -> _AhberrW { _AhberrW { w : self } } # [ doc = "Bit 3 - STALL response received interrupt mask" ] # [ inline ( always ) ] pub fn stallm ( & mut self ) -> _StallmW { _StallmW { w : self } } # [ doc = "Bit 4 - NAK response received interrupt mask" ] # [ inline ( always ) ] pub fn nakm ( & mut self ) -> _NakmW { _NakmW { w : self } } # [ doc = "Bit 5 - ACK response received/transmitted interrupt mask" ] # [ inline ( always ) ] pub fn ackm ( & mut self ) -> _AckmW { _AckmW { w : self } } # [ doc = "Bit 6 - response received interrupt mask" ] # [ inline ( always ) ] pub fn nyet ( & mut self ) -> _NyetW { _NyetW { w : self } } # [ doc = "Bit 7 - Transaction error mask" ] # [ inline ( always ) ] pub fn txerrm ( & mut self ) -> _TxerrmW { _TxerrmW { w : self } } # [ doc = "Bit 8 - Babble error mask" ] # [ inline ( always ) ] pub fn bberrm ( & mut self ) -> _BberrmW { _BberrmW { w : self } } # [ doc = "Bit 9 - Frame overrun mask" ] # [ inline ( always ) ] pub fn frmorm ( & mut self ) -> _FrmormW { _FrmormW { w : self } } # [ doc = "Bit 10 - Data toggle error mask" ] # [ inline ( always ) ] pub fn dterrm ( & mut self ) -> _DterrmW { _DterrmW { w : self } } }