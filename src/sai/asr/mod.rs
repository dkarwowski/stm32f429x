# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Asr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct FlvlR { bits : u8 } impl FlvlR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LfsdetR { bits : u8 } impl LfsdetR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AfsdetR { bits : u8 } impl AfsdetR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CnrdyR { bits : u8 } impl CnrdyR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FreqR { bits : u8 } impl FreqR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WckcfgR { bits : u8 } impl WckcfgR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MutedetR { bits : u8 } impl MutedetR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct OvrudrR { bits : u8 } impl OvrudrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _FlvlW < 'a > { w : & 'a mut W } impl < 'a > _FlvlW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LfsdetW < 'a > { w : & 'a mut W } impl < 'a > _LfsdetW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AfsdetW < 'a > { w : & 'a mut W } impl < 'a > _AfsdetW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CnrdyW < 'a > { w : & 'a mut W } impl < 'a > _CnrdyW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _FreqW < 'a > { w : & 'a mut W } impl < 'a > _FreqW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WckcfgW < 'a > { w : & 'a mut W } impl < 'a > _WckcfgW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MutedetW < 'a > { w : & 'a mut W } impl < 'a > _MutedetW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _OvrudrW < 'a > { w : & 'a mut W } impl < 'a > _OvrudrW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 16:18 - FIFO level threshold" ] # [ inline ( always ) ] pub fn flvl ( & self ) -> FlvlR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FlvlR { bits } } # [ doc = "Bit 6 - Late frame synchronization detection" ] # [ inline ( always ) ] pub fn lfsdet ( & self ) -> LfsdetR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LfsdetR { bits } } # [ doc = "Bit 5 - Anticipated frame synchronization detection" ] # [ inline ( always ) ] pub fn afsdet ( & self ) -> AfsdetR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AfsdetR { bits } } # [ doc = "Bit 4 - Codec not ready" ] # [ inline ( always ) ] pub fn cnrdy ( & self ) -> CnrdyR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CnrdyR { bits } } # [ doc = "Bit 3 - FIFO request" ] # [ inline ( always ) ] pub fn freq ( & self ) -> FreqR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FreqR { bits } } # [ doc = "Bit 2 - Wrong clock configuration flag. This bit is read only." ] # [ inline ( always ) ] pub fn wckcfg ( & self ) -> WckcfgR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WckcfgR { bits } } # [ doc = "Bit 1 - Mute detection" ] # [ inline ( always ) ] pub fn mutedet ( & self ) -> MutedetR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MutedetR { bits } } # [ doc = "Bit 0 - Overrun / underrun" ] # [ inline ( always ) ] pub fn ovrudr ( & self ) -> OvrudrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; OvrudrR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 16:18 - FIFO level threshold" ] # [ inline ( always ) ] pub fn flvl ( & mut self ) -> _FlvlW { _FlvlW { w : self } } # [ doc = "Bit 6 - Late frame synchronization detection" ] # [ inline ( always ) ] pub fn lfsdet ( & mut self ) -> _LfsdetW { _LfsdetW { w : self } } # [ doc = "Bit 5 - Anticipated frame synchronization detection" ] # [ inline ( always ) ] pub fn afsdet ( & mut self ) -> _AfsdetW { _AfsdetW { w : self } } # [ doc = "Bit 4 - Codec not ready" ] # [ inline ( always ) ] pub fn cnrdy ( & mut self ) -> _CnrdyW { _CnrdyW { w : self } } # [ doc = "Bit 3 - FIFO request" ] # [ inline ( always ) ] pub fn freq ( & mut self ) -> _FreqW { _FreqW { w : self } } # [ doc = "Bit 2 - Wrong clock configuration flag. This bit is read only." ] # [ inline ( always ) ] pub fn wckcfg ( & mut self ) -> _WckcfgW { _WckcfgW { w : self } } # [ doc = "Bit 1 - Mute detection" ] # [ inline ( always ) ] pub fn mutedet ( & mut self ) -> _MutedetW { _MutedetW { w : self } } # [ doc = "Bit 0 - Overrun / underrun" ] # [ inline ( always ) ] pub fn ovrudr ( & mut self ) -> _OvrudrW { _OvrudrW { w : self } } }