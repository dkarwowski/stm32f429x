# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Macfcr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct FcbR { bits : u8 } impl FcbR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TfceR { bits : u8 } impl TfceR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RfceR { bits : u8 } impl RfceR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct UpfdR { bits : u8 } impl UpfdR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PltR { bits : u8 } impl PltR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ZqpdR { bits : u8 } impl ZqpdR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PtR { bits : u16 } impl PtR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u16 { self . bits } } # [ doc = r" Proxy" ] pub struct _FcbW < 'a > { w : & 'a mut W } impl < 'a > _FcbW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TfceW < 'a > { w : & 'a mut W } impl < 'a > _TfceW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _RfceW < 'a > { w : & 'a mut W } impl < 'a > _RfceW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _UpfdW < 'a > { w : & 'a mut W } impl < 'a > _UpfdW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PltW < 'a > { w : & 'a mut W } impl < 'a > _PltW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ZqpdW < 'a > { w : & 'a mut W } impl < 'a > _ZqpdW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PtW < 'a > { w : & 'a mut W } impl < 'a > _PtW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u16 ) -> & 'a mut W { const MASK : u16 = 65535 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - no description available" ] # [ inline ( always ) ] pub fn fcb ( & self ) -> FcbR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FcbR { bits } } # [ doc = "Bit 1 - no description available" ] # [ inline ( always ) ] pub fn tfce ( & self ) -> TfceR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TfceR { bits } } # [ doc = "Bit 2 - no description available" ] # [ inline ( always ) ] pub fn rfce ( & self ) -> RfceR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RfceR { bits } } # [ doc = "Bit 3 - no description available" ] # [ inline ( always ) ] pub fn upfd ( & self ) -> UpfdR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; UpfdR { bits } } # [ doc = "Bits 4:5 - no description available" ] # [ inline ( always ) ] pub fn plt ( & self ) -> PltR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PltR { bits } } # [ doc = "Bit 7 - no description available" ] # [ inline ( always ) ] pub fn zqpd ( & self ) -> ZqpdR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ZqpdR { bits } } # [ doc = "Bits 16:31 - no description available" ] # [ inline ( always ) ] pub fn pt ( & self ) -> PtR { let bits = { const MASK : u16 = 65535 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u16 } ; PtR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - no description available" ] # [ inline ( always ) ] pub fn fcb ( & mut self ) -> _FcbW { _FcbW { w : self } } # [ doc = "Bit 1 - no description available" ] # [ inline ( always ) ] pub fn tfce ( & mut self ) -> _TfceW { _TfceW { w : self } } # [ doc = "Bit 2 - no description available" ] # [ inline ( always ) ] pub fn rfce ( & mut self ) -> _RfceW { _RfceW { w : self } } # [ doc = "Bit 3 - no description available" ] # [ inline ( always ) ] pub fn upfd ( & mut self ) -> _UpfdW { _UpfdW { w : self } } # [ doc = "Bits 4:5 - no description available" ] # [ inline ( always ) ] pub fn plt ( & mut self ) -> _PltW { _PltW { w : self } } # [ doc = "Bit 7 - no description available" ] # [ inline ( always ) ] pub fn zqpd ( & mut self ) -> _ZqpdW { _ZqpdW { w : self } } # [ doc = "Bits 16:31 - no description available" ] # [ inline ( always ) ] pub fn pt ( & mut self ) -> _PtW { _PtW { w : self } } }