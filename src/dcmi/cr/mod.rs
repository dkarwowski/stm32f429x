# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Cr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct EnableR { bits : u8 } impl EnableR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EdmR { bits : u8 } impl EdmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FcrcR { bits : u8 } impl FcrcR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct VspolR { bits : u8 } impl VspolR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HspolR { bits : u8 } impl HspolR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PckpolR { bits : u8 } impl PckpolR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EssR { bits : u8 } impl EssR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct JpegR { bits : u8 } impl JpegR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CropR { bits : u8 } impl CropR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CmR { bits : u8 } impl CmR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CaptureR { bits : u8 } impl CaptureR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _EnableW < 'a > { w : & 'a mut W } impl < 'a > _EnableW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EdmW < 'a > { w : & 'a mut W } impl < 'a > _EdmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _FcrcW < 'a > { w : & 'a mut W } impl < 'a > _FcrcW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _VspolW < 'a > { w : & 'a mut W } impl < 'a > _VspolW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _HspolW < 'a > { w : & 'a mut W } impl < 'a > _HspolW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PckpolW < 'a > { w : & 'a mut W } impl < 'a > _PckpolW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _EssW < 'a > { w : & 'a mut W } impl < 'a > _EssW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _JpegW < 'a > { w : & 'a mut W } impl < 'a > _JpegW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CropW < 'a > { w : & 'a mut W } impl < 'a > _CropW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CmW < 'a > { w : & 'a mut W } impl < 'a > _CmW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CaptureW < 'a > { w : & 'a mut W } impl < 'a > _CaptureW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 14 - DCMI enable" ] # [ inline ( always ) ] pub fn enable ( & self ) -> EnableR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EnableR { bits } } # [ doc = "Bits 10:11 - Extended data mode" ] # [ inline ( always ) ] pub fn edm ( & self ) -> EdmR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EdmR { bits } } # [ doc = "Bits 8:9 - Frame capture rate control" ] # [ inline ( always ) ] pub fn fcrc ( & self ) -> FcrcR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FcrcR { bits } } # [ doc = "Bit 7 - Vertical synchronization polarity" ] # [ inline ( always ) ] pub fn vspol ( & self ) -> VspolR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; VspolR { bits } } # [ doc = "Bit 6 - Horizontal synchronization polarity" ] # [ inline ( always ) ] pub fn hspol ( & self ) -> HspolR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HspolR { bits } } # [ doc = "Bit 5 - Pixel clock polarity" ] # [ inline ( always ) ] pub fn pckpol ( & self ) -> PckpolR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PckpolR { bits } } # [ doc = "Bit 4 - Embedded synchronization select" ] # [ inline ( always ) ] pub fn ess ( & self ) -> EssR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EssR { bits } } # [ doc = "Bit 3 - JPEG format" ] # [ inline ( always ) ] pub fn jpeg ( & self ) -> JpegR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; JpegR { bits } } # [ doc = "Bit 2 - Crop feature" ] # [ inline ( always ) ] pub fn crop ( & self ) -> CropR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CropR { bits } } # [ doc = "Bit 1 - Capture mode" ] # [ inline ( always ) ] pub fn cm ( & self ) -> CmR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CmR { bits } } # [ doc = "Bit 0 - Capture enable" ] # [ inline ( always ) ] pub fn capture ( & self ) -> CaptureR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CaptureR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 14 - DCMI enable" ] # [ inline ( always ) ] pub fn enable ( & mut self ) -> _EnableW { _EnableW { w : self } } # [ doc = "Bits 10:11 - Extended data mode" ] # [ inline ( always ) ] pub fn edm ( & mut self ) -> _EdmW { _EdmW { w : self } } # [ doc = "Bits 8:9 - Frame capture rate control" ] # [ inline ( always ) ] pub fn fcrc ( & mut self ) -> _FcrcW { _FcrcW { w : self } } # [ doc = "Bit 7 - Vertical synchronization polarity" ] # [ inline ( always ) ] pub fn vspol ( & mut self ) -> _VspolW { _VspolW { w : self } } # [ doc = "Bit 6 - Horizontal synchronization polarity" ] # [ inline ( always ) ] pub fn hspol ( & mut self ) -> _HspolW { _HspolW { w : self } } # [ doc = "Bit 5 - Pixel clock polarity" ] # [ inline ( always ) ] pub fn pckpol ( & mut self ) -> _PckpolW { _PckpolW { w : self } } # [ doc = "Bit 4 - Embedded synchronization select" ] # [ inline ( always ) ] pub fn ess ( & mut self ) -> _EssW { _EssW { w : self } } # [ doc = "Bit 3 - JPEG format" ] # [ inline ( always ) ] pub fn jpeg ( & mut self ) -> _JpegW { _JpegW { w : self } } # [ doc = "Bit 2 - Crop feature" ] # [ inline ( always ) ] pub fn crop ( & mut self ) -> _CropW { _CropW { w : self } } # [ doc = "Bit 1 - Capture mode" ] # [ inline ( always ) ] pub fn cm ( & mut self ) -> _CmW { _CmW { w : self } } # [ doc = "Bit 0 - Capture enable" ] # [ inline ( always ) ] pub fn capture ( & mut self ) -> _CaptureW { _CaptureW { w : self } } }