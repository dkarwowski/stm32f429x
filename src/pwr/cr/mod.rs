# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Cr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct LpdsR { bits : u8 } impl LpdsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PddsR { bits : u8 } impl PddsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CwufR { bits : u8 } impl CwufR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CsbfR { bits : u8 } impl CsbfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PvdeR { bits : u8 } impl PvdeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PlsR { bits : u8 } impl PlsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbpR { bits : u8 } impl DbpR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct FpdsR { bits : u8 } impl FpdsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LpudsR { bits : u8 } impl LpudsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MrudsR { bits : u8 } impl MrudsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Adcdc1R { bits : u8 } impl Adcdc1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct VosR { bits : u8 } impl VosR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct OdenR { bits : u8 } impl OdenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct OdswenR { bits : u8 } impl OdswenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct UdenR { bits : u8 } impl UdenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _LpdsW < 'a > { w : & 'a mut W } impl < 'a > _LpdsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PddsW < 'a > { w : & 'a mut W } impl < 'a > _PddsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CwufW < 'a > { w : & 'a mut W } impl < 'a > _CwufW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _CsbfW < 'a > { w : & 'a mut W } impl < 'a > _CsbfW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PvdeW < 'a > { w : & 'a mut W } impl < 'a > _PvdeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PlsW < 'a > { w : & 'a mut W } impl < 'a > _PlsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbpW < 'a > { w : & 'a mut W } impl < 'a > _DbpW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _FpdsW < 'a > { w : & 'a mut W } impl < 'a > _FpdsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LpudsW < 'a > { w : & 'a mut W } impl < 'a > _LpudsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MrudsW < 'a > { w : & 'a mut W } impl < 'a > _MrudsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Adcdc1W < 'a > { w : & 'a mut W } impl < 'a > _Adcdc1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _VosW < 'a > { w : & 'a mut W } impl < 'a > _VosW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _OdenW < 'a > { w : & 'a mut W } impl < 'a > _OdenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _OdswenW < 'a > { w : & 'a mut W } impl < 'a > _OdswenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _UdenW < 'a > { w : & 'a mut W } impl < 'a > _UdenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 18 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Low-power deep sleep" ] # [ inline ( always ) ] pub fn lpds ( & self ) -> LpdsR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LpdsR { bits } } # [ doc = "Bit 1 - Power down deepsleep" ] # [ inline ( always ) ] pub fn pdds ( & self ) -> PddsR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PddsR { bits } } # [ doc = "Bit 2 - Clear wakeup flag" ] # [ inline ( always ) ] pub fn cwuf ( & self ) -> CwufR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CwufR { bits } } # [ doc = "Bit 3 - Clear standby flag" ] # [ inline ( always ) ] pub fn csbf ( & self ) -> CsbfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CsbfR { bits } } # [ doc = "Bit 4 - Power voltage detector enable" ] # [ inline ( always ) ] pub fn pvde ( & self ) -> PvdeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PvdeR { bits } } # [ doc = "Bits 5:7 - PVD level selection" ] # [ inline ( always ) ] pub fn pls ( & self ) -> PlsR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PlsR { bits } } # [ doc = "Bit 8 - Disable backup domain write protection" ] # [ inline ( always ) ] pub fn dbp ( & self ) -> DbpR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbpR { bits } } # [ doc = "Bit 9 - Flash power down in Stop mode" ] # [ inline ( always ) ] pub fn fpds ( & self ) -> FpdsR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; FpdsR { bits } } # [ doc = "Bit 10 - Low-Power Regulator Low Voltage in deepsleep" ] # [ inline ( always ) ] pub fn lpuds ( & self ) -> LpudsR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LpudsR { bits } } # [ doc = "Bit 11 - Main regulator low voltage in deepsleep mode" ] # [ inline ( always ) ] pub fn mruds ( & self ) -> MrudsR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MrudsR { bits } } # [ doc = "Bit 13 - ADCDC1" ] # [ inline ( always ) ] pub fn adcdc1 ( & self ) -> Adcdc1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Adcdc1R { bits } } # [ doc = "Bits 14:15 - Regulator voltage scaling output selection" ] # [ inline ( always ) ] pub fn vos ( & self ) -> VosR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; VosR { bits } } # [ doc = "Bit 16 - Over-drive enable" ] # [ inline ( always ) ] pub fn oden ( & self ) -> OdenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; OdenR { bits } } # [ doc = "Bit 17 - Over-drive switching enabled" ] # [ inline ( always ) ] pub fn odswen ( & self ) -> OdswenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; OdswenR { bits } } # [ doc = "Bits 18:19 - Under-drive enable in stop mode" ] # [ inline ( always ) ] pub fn uden ( & self ) -> UdenR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; UdenR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 49152 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Low-power deep sleep" ] # [ inline ( always ) ] pub fn lpds ( & mut self ) -> _LpdsW { _LpdsW { w : self } } # [ doc = "Bit 1 - Power down deepsleep" ] # [ inline ( always ) ] pub fn pdds ( & mut self ) -> _PddsW { _PddsW { w : self } } # [ doc = "Bit 2 - Clear wakeup flag" ] # [ inline ( always ) ] pub fn cwuf ( & mut self ) -> _CwufW { _CwufW { w : self } } # [ doc = "Bit 3 - Clear standby flag" ] # [ inline ( always ) ] pub fn csbf ( & mut self ) -> _CsbfW { _CsbfW { w : self } } # [ doc = "Bit 4 - Power voltage detector enable" ] # [ inline ( always ) ] pub fn pvde ( & mut self ) -> _PvdeW { _PvdeW { w : self } } # [ doc = "Bits 5:7 - PVD level selection" ] # [ inline ( always ) ] pub fn pls ( & mut self ) -> _PlsW { _PlsW { w : self } } # [ doc = "Bit 8 - Disable backup domain write protection" ] # [ inline ( always ) ] pub fn dbp ( & mut self ) -> _DbpW { _DbpW { w : self } } # [ doc = "Bit 9 - Flash power down in Stop mode" ] # [ inline ( always ) ] pub fn fpds ( & mut self ) -> _FpdsW { _FpdsW { w : self } } # [ doc = "Bit 10 - Low-Power Regulator Low Voltage in deepsleep" ] # [ inline ( always ) ] pub fn lpuds ( & mut self ) -> _LpudsW { _LpudsW { w : self } } # [ doc = "Bit 11 - Main regulator low voltage in deepsleep mode" ] # [ inline ( always ) ] pub fn mruds ( & mut self ) -> _MrudsW { _MrudsW { w : self } } # [ doc = "Bit 13 - ADCDC1" ] # [ inline ( always ) ] pub fn adcdc1 ( & mut self ) -> _Adcdc1W { _Adcdc1W { w : self } } # [ doc = "Bits 14:15 - Regulator voltage scaling output selection" ] # [ inline ( always ) ] pub fn vos ( & mut self ) -> _VosW { _VosW { w : self } } # [ doc = "Bit 16 - Over-drive enable" ] # [ inline ( always ) ] pub fn oden ( & mut self ) -> _OdenW { _OdenW { w : self } } # [ doc = "Bit 17 - Over-drive switching enabled" ] # [ inline ( always ) ] pub fn odswen ( & mut self ) -> _OdswenW { _OdswenW { w : self } } # [ doc = "Bits 18:19 - Under-drive enable in stop mode" ] # [ inline ( always ) ] pub fn uden ( & mut self ) -> _UdenW { _UdenW { w : self } } }