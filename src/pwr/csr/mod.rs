# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Csr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct WufR { bits : u8 } impl WufR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct SbfR { bits : u8 } impl SbfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PvdoR { bits : u8 } impl PvdoR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BrrR { bits : u8 } impl BrrR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct EwupR { bits : u8 } impl EwupR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BreR { bits : u8 } impl BreR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct VosrdyR { bits : u8 } impl VosrdyR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct OdrdyR { bits : u8 } impl OdrdyR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct OdswrdyR { bits : u8 } impl OdswrdyR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct UdrdyR { bits : u8 } impl UdrdyR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _EwupW < 'a > { w : & 'a mut W } impl < 'a > _EwupW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BreW < 'a > { w : & 'a mut W } impl < 'a > _BreW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _VosrdyW < 'a > { w : & 'a mut W } impl < 'a > _VosrdyW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _UdrdyW < 'a > { w : & 'a mut W } impl < 'a > _UdrdyW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 18 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - Wakeup flag" ] # [ inline ( always ) ] pub fn wuf ( & self ) -> WufR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WufR { bits } } # [ doc = "Bit 1 - Standby flag" ] # [ inline ( always ) ] pub fn sbf ( & self ) -> SbfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; SbfR { bits } } # [ doc = "Bit 2 - PVD output" ] # [ inline ( always ) ] pub fn pvdo ( & self ) -> PvdoR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PvdoR { bits } } # [ doc = "Bit 3 - Backup regulator ready" ] # [ inline ( always ) ] pub fn brr ( & self ) -> BrrR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BrrR { bits } } # [ doc = "Bit 8 - Enable WKUP pin" ] # [ inline ( always ) ] pub fn ewup ( & self ) -> EwupR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; EwupR { bits } } # [ doc = "Bit 9 - Backup regulator enable" ] # [ inline ( always ) ] pub fn bre ( & self ) -> BreR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BreR { bits } } # [ doc = "Bit 14 - Regulator voltage scaling output selection ready bit" ] # [ inline ( always ) ] pub fn vosrdy ( & self ) -> VosrdyR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; VosrdyR { bits } } # [ doc = "Bit 16 - Over-drive mode ready" ] # [ inline ( always ) ] pub fn odrdy ( & self ) -> OdrdyR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; OdrdyR { bits } } # [ doc = "Bit 17 - Over-drive mode switching ready" ] # [ inline ( always ) ] pub fn odswrdy ( & self ) -> OdswrdyR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; OdswrdyR { bits } } # [ doc = "Bits 18:19 - Under-drive ready flag" ] # [ inline ( always ) ] pub fn udrdy ( & self ) -> UdrdyR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; UdrdyR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 8 - Enable WKUP pin" ] # [ inline ( always ) ] pub fn ewup ( & mut self ) -> _EwupW { _EwupW { w : self } } # [ doc = "Bit 9 - Backup regulator enable" ] # [ inline ( always ) ] pub fn bre ( & mut self ) -> _BreW { _BreW { w : self } } # [ doc = "Bit 14 - Regulator voltage scaling output selection ready bit" ] # [ inline ( always ) ] pub fn vosrdy ( & mut self ) -> _VosrdyW { _VosrdyW { w : self } } # [ doc = "Bits 18:19 - Under-drive ready flag" ] # [ inline ( always ) ] pub fn udrdy ( & mut self ) -> _UdrdyW { _UdrdyW { w : self } } }