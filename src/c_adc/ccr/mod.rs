# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Ccr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct TsvrefeR { bits : u8 } impl TsvrefeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct VbateR { bits : u8 } impl VbateR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct AdcpreR { bits : u8 } impl AdcpreR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DmaR { bits : u8 } impl DmaR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DdsR { bits : u8 } impl DdsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DelayR { bits : u8 } impl DelayR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct MultR { bits : u8 } impl MultR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _TsvrefeW < 'a > { w : & 'a mut W } impl < 'a > _TsvrefeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 23 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _VbateW < 'a > { w : & 'a mut W } impl < 'a > _VbateW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _AdcpreW < 'a > { w : & 'a mut W } impl < 'a > _AdcpreW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DmaW < 'a > { w : & 'a mut W } impl < 'a > _DmaW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DdsW < 'a > { w : & 'a mut W } impl < 'a > _DdsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DelayW < 'a > { w : & 'a mut W } impl < 'a > _DelayW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _MultW < 'a > { w : & 'a mut W } impl < 'a > _MultW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 23 - Temperature sensor and VREFINT enable" ] # [ inline ( always ) ] pub fn tsvrefe ( & self ) -> TsvrefeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 23 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TsvrefeR { bits } } # [ doc = "Bit 22 - VBAT enable" ] # [ inline ( always ) ] pub fn vbate ( & self ) -> VbateR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; VbateR { bits } } # [ doc = "Bits 16:17 - ADC prescaler" ] # [ inline ( always ) ] pub fn adcpre ( & self ) -> AdcpreR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; AdcpreR { bits } } # [ doc = "Bits 14:15 - Direct memory access mode for multi ADC mode" ] # [ inline ( always ) ] pub fn dma ( & self ) -> DmaR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DmaR { bits } } # [ doc = "Bit 13 - DMA disable selection for multi-ADC mode" ] # [ inline ( always ) ] pub fn dds ( & self ) -> DdsR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DdsR { bits } } # [ doc = "Bits 8:11 - Delay between 2 sampling phases" ] # [ inline ( always ) ] pub fn delay ( & self ) -> DelayR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DelayR { bits } } # [ doc = "Bits 0:4 - Multi ADC mode selection" ] # [ inline ( always ) ] pub fn mult ( & self ) -> MultR { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; MultR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 23 - Temperature sensor and VREFINT enable" ] # [ inline ( always ) ] pub fn tsvrefe ( & mut self ) -> _TsvrefeW { _TsvrefeW { w : self } } # [ doc = "Bit 22 - VBAT enable" ] # [ inline ( always ) ] pub fn vbate ( & mut self ) -> _VbateW { _VbateW { w : self } } # [ doc = "Bits 16:17 - ADC prescaler" ] # [ inline ( always ) ] pub fn adcpre ( & mut self ) -> _AdcpreW { _AdcpreW { w : self } } # [ doc = "Bits 14:15 - Direct memory access mode for multi ADC mode" ] # [ inline ( always ) ] pub fn dma ( & mut self ) -> _DmaW { _DmaW { w : self } } # [ doc = "Bit 13 - DMA disable selection for multi-ADC mode" ] # [ inline ( always ) ] pub fn dds ( & mut self ) -> _DdsW { _DdsW { w : self } } # [ doc = "Bits 8:11 - Delay between 2 sampling phases" ] # [ inline ( always ) ] pub fn delay ( & mut self ) -> _DelayW { _DelayW { w : self } } # [ doc = "Bits 0:4 - Multi ADC mode selection" ] # [ inline ( always ) ] pub fn mult ( & mut self ) -> _MultW { _MultW { w : self } } }