# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } impl super :: Csr { # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } } # [ doc = r" Value of the field" ] pub struct Ovr3R { bits : u8 } impl Ovr3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Strt3R { bits : u8 } impl Strt3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Jstrt3R { bits : u8 } impl Jstrt3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Jeoc3R { bits : u8 } impl Jeoc3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Eoc3R { bits : u8 } impl Eoc3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Awd3R { bits : u8 } impl Awd3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ovr2R { bits : u8 } impl Ovr2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Strt2R { bits : u8 } impl Strt2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Jstrt2R { bits : u8 } impl Jstrt2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Jeoc2R { bits : u8 } impl Jeoc2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Eoc2R { bits : u8 } impl Eoc2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Awd2R { bits : u8 } impl Awd2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ovr1R { bits : u8 } impl Ovr1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Strt1R { bits : u8 } impl Strt1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Jstrt1R { bits : u8 } impl Jstrt1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Jeoc1R { bits : u8 } impl Jeoc1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Eoc1R { bits : u8 } impl Eoc1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Awd1R { bits : u8 } impl Awd1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 21 - Overrun flag of ADC3" ] # [ inline ( always ) ] pub fn ovr3 ( & self ) -> Ovr3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ovr3R { bits } } # [ doc = "Bit 20 - Regular channel Start flag of ADC 3" ] # [ inline ( always ) ] pub fn strt3 ( & self ) -> Strt3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Strt3R { bits } } # [ doc = "Bit 19 - Injected channel Start flag of ADC 3" ] # [ inline ( always ) ] pub fn jstrt3 ( & self ) -> Jstrt3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Jstrt3R { bits } } # [ doc = "Bit 18 - Injected channel end of conversion of ADC 3" ] # [ inline ( always ) ] pub fn jeoc3 ( & self ) -> Jeoc3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Jeoc3R { bits } } # [ doc = "Bit 17 - End of conversion of ADC 3" ] # [ inline ( always ) ] pub fn eoc3 ( & self ) -> Eoc3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Eoc3R { bits } } # [ doc = "Bit 16 - Analog watchdog flag of ADC 3" ] # [ inline ( always ) ] pub fn awd3 ( & self ) -> Awd3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Awd3R { bits } } # [ doc = "Bit 13 - Overrun flag of ADC 2" ] # [ inline ( always ) ] pub fn ovr2 ( & self ) -> Ovr2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ovr2R { bits } } # [ doc = "Bit 12 - Regular channel Start flag of ADC 2" ] # [ inline ( always ) ] pub fn strt2 ( & self ) -> Strt2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Strt2R { bits } } # [ doc = "Bit 11 - Injected channel Start flag of ADC 2" ] # [ inline ( always ) ] pub fn jstrt2 ( & self ) -> Jstrt2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Jstrt2R { bits } } # [ doc = "Bit 10 - Injected channel end of conversion of ADC 2" ] # [ inline ( always ) ] pub fn jeoc2 ( & self ) -> Jeoc2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Jeoc2R { bits } } # [ doc = "Bit 9 - End of conversion of ADC 2" ] # [ inline ( always ) ] pub fn eoc2 ( & self ) -> Eoc2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Eoc2R { bits } } # [ doc = "Bit 8 - Analog watchdog flag of ADC 2" ] # [ inline ( always ) ] pub fn awd2 ( & self ) -> Awd2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Awd2R { bits } } # [ doc = "Bit 5 - Overrun flag of ADC 1" ] # [ inline ( always ) ] pub fn ovr1 ( & self ) -> Ovr1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ovr1R { bits } } # [ doc = "Bit 4 - Regular channel Start flag of ADC 1" ] # [ inline ( always ) ] pub fn strt1 ( & self ) -> Strt1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Strt1R { bits } } # [ doc = "Bit 3 - Injected channel Start flag of ADC 1" ] # [ inline ( always ) ] pub fn jstrt1 ( & self ) -> Jstrt1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Jstrt1R { bits } } # [ doc = "Bit 2 - Injected channel end of conversion of ADC 1" ] # [ inline ( always ) ] pub fn jeoc1 ( & self ) -> Jeoc1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Jeoc1R { bits } } # [ doc = "Bit 1 - End of conversion of ADC 1" ] # [ inline ( always ) ] pub fn eoc1 ( & self ) -> Eoc1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Eoc1R { bits } } # [ doc = "Bit 0 - Analog watchdog flag of ADC 1" ] # [ inline ( always ) ] pub fn awd1 ( & self ) -> Awd1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Awd1R { bits } } }