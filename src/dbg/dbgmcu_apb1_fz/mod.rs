# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: DbgmcuApb1Fz { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct DbgTim2StopR { bits : u8 } impl DbgTim2StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgTim3StopR { bits : u8 } impl DbgTim3StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgTim4StopR { bits : u8 } impl DbgTim4StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgTim5StopR { bits : u8 } impl DbgTim5StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgTim6StopR { bits : u8 } impl DbgTim6StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgTim7StopR { bits : u8 } impl DbgTim7StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgTim12StopR { bits : u8 } impl DbgTim12StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgTim13StopR { bits : u8 } impl DbgTim13StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgTim14StopR { bits : u8 } impl DbgTim14StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgWwdgStopR { bits : u8 } impl DbgWwdgStopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgIwdegStopR { bits : u8 } impl DbgIwdegStopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgJ2c1SmbusTimeoutR { bits : u8 } impl DbgJ2c1SmbusTimeoutR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgJ2c2SmbusTimeoutR { bits : u8 } impl DbgJ2c2SmbusTimeoutR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgJ2c3smbusTimeoutR { bits : u8 } impl DbgJ2c3smbusTimeoutR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgCan1StopR { bits : u8 } impl DbgCan1StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgCan2StopR { bits : u8 } impl DbgCan2StopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _DbgTim2StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgTim2StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgTim3StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgTim3StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgTim4StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgTim4StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgTim5StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgTim5StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgTim6StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgTim6StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgTim7StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgTim7StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgTim12StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgTim12StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgTim13StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgTim13StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgTim14StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgTim14StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgWwdgStopW < 'a > { w : & 'a mut W } impl < 'a > _DbgWwdgStopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgIwdegStopW < 'a > { w : & 'a mut W } impl < 'a > _DbgIwdegStopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgJ2c1SmbusTimeoutW < 'a > { w : & 'a mut W } impl < 'a > _DbgJ2c1SmbusTimeoutW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgJ2c2SmbusTimeoutW < 'a > { w : & 'a mut W } impl < 'a > _DbgJ2c2SmbusTimeoutW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgJ2c3smbusTimeoutW < 'a > { w : & 'a mut W } impl < 'a > _DbgJ2c3smbusTimeoutW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 23 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgCan1StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgCan1StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 25 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgCan2StopW < 'a > { w : & 'a mut W } impl < 'a > _DbgCan2StopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 26 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - DBG_TIM2_STOP" ] # [ inline ( always ) ] pub fn dbg_tim2_stop ( & self ) -> DbgTim2StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgTim2StopR { bits } } # [ doc = "Bit 1 - DBG_TIM3 _STOP" ] # [ inline ( always ) ] pub fn dbg_tim3_stop ( & self ) -> DbgTim3StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgTim3StopR { bits } } # [ doc = "Bit 2 - DBG_TIM4_STOP" ] # [ inline ( always ) ] pub fn dbg_tim4_stop ( & self ) -> DbgTim4StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgTim4StopR { bits } } # [ doc = "Bit 3 - DBG_TIM5_STOP" ] # [ inline ( always ) ] pub fn dbg_tim5_stop ( & self ) -> DbgTim5StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgTim5StopR { bits } } # [ doc = "Bit 4 - DBG_TIM6_STOP" ] # [ inline ( always ) ] pub fn dbg_tim6_stop ( & self ) -> DbgTim6StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgTim6StopR { bits } } # [ doc = "Bit 5 - DBG_TIM7_STOP" ] # [ inline ( always ) ] pub fn dbg_tim7_stop ( & self ) -> DbgTim7StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgTim7StopR { bits } } # [ doc = "Bit 6 - DBG_TIM12_STOP" ] # [ inline ( always ) ] pub fn dbg_tim12_stop ( & self ) -> DbgTim12StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgTim12StopR { bits } } # [ doc = "Bit 7 - DBG_TIM13_STOP" ] # [ inline ( always ) ] pub fn dbg_tim13_stop ( & self ) -> DbgTim13StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgTim13StopR { bits } } # [ doc = "Bit 8 - DBG_TIM14_STOP" ] # [ inline ( always ) ] pub fn dbg_tim14_stop ( & self ) -> DbgTim14StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgTim14StopR { bits } } # [ doc = "Bit 11 - DBG_WWDG_STOP" ] # [ inline ( always ) ] pub fn dbg_wwdg_stop ( & self ) -> DbgWwdgStopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgWwdgStopR { bits } } # [ doc = "Bit 12 - DBG_IWDEG_STOP" ] # [ inline ( always ) ] pub fn dbg_iwdeg_stop ( & self ) -> DbgIwdegStopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgIwdegStopR { bits } } # [ doc = "Bit 21 - DBG_J2C1_SMBUS_TIMEOUT" ] # [ inline ( always ) ] pub fn dbg_j2c1_smbus_timeout ( & self ) -> DbgJ2c1SmbusTimeoutR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgJ2c1SmbusTimeoutR { bits } } # [ doc = "Bit 22 - DBG_J2C2_SMBUS_TIMEOUT" ] # [ inline ( always ) ] pub fn dbg_j2c2_smbus_timeout ( & self ) -> DbgJ2c2SmbusTimeoutR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgJ2c2SmbusTimeoutR { bits } } # [ doc = "Bit 23 - DBG_J2C3SMBUS_TIMEOUT" ] # [ inline ( always ) ] pub fn dbg_j2c3smbus_timeout ( & self ) -> DbgJ2c3smbusTimeoutR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 23 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgJ2c3smbusTimeoutR { bits } } # [ doc = "Bit 25 - DBG_CAN1_STOP" ] # [ inline ( always ) ] pub fn dbg_can1_stop ( & self ) -> DbgCan1StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 25 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgCan1StopR { bits } } # [ doc = "Bit 26 - DBG_CAN2_STOP" ] # [ inline ( always ) ] pub fn dbg_can2_stop ( & self ) -> DbgCan2StopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 26 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgCan2StopR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - DBG_TIM2_STOP" ] # [ inline ( always ) ] pub fn dbg_tim2_stop ( & mut self ) -> _DbgTim2StopW { _DbgTim2StopW { w : self } } # [ doc = "Bit 1 - DBG_TIM3 _STOP" ] # [ inline ( always ) ] pub fn dbg_tim3_stop ( & mut self ) -> _DbgTim3StopW { _DbgTim3StopW { w : self } } # [ doc = "Bit 2 - DBG_TIM4_STOP" ] # [ inline ( always ) ] pub fn dbg_tim4_stop ( & mut self ) -> _DbgTim4StopW { _DbgTim4StopW { w : self } } # [ doc = "Bit 3 - DBG_TIM5_STOP" ] # [ inline ( always ) ] pub fn dbg_tim5_stop ( & mut self ) -> _DbgTim5StopW { _DbgTim5StopW { w : self } } # [ doc = "Bit 4 - DBG_TIM6_STOP" ] # [ inline ( always ) ] pub fn dbg_tim6_stop ( & mut self ) -> _DbgTim6StopW { _DbgTim6StopW { w : self } } # [ doc = "Bit 5 - DBG_TIM7_STOP" ] # [ inline ( always ) ] pub fn dbg_tim7_stop ( & mut self ) -> _DbgTim7StopW { _DbgTim7StopW { w : self } } # [ doc = "Bit 6 - DBG_TIM12_STOP" ] # [ inline ( always ) ] pub fn dbg_tim12_stop ( & mut self ) -> _DbgTim12StopW { _DbgTim12StopW { w : self } } # [ doc = "Bit 7 - DBG_TIM13_STOP" ] # [ inline ( always ) ] pub fn dbg_tim13_stop ( & mut self ) -> _DbgTim13StopW { _DbgTim13StopW { w : self } } # [ doc = "Bit 8 - DBG_TIM14_STOP" ] # [ inline ( always ) ] pub fn dbg_tim14_stop ( & mut self ) -> _DbgTim14StopW { _DbgTim14StopW { w : self } } # [ doc = "Bit 11 - DBG_WWDG_STOP" ] # [ inline ( always ) ] pub fn dbg_wwdg_stop ( & mut self ) -> _DbgWwdgStopW { _DbgWwdgStopW { w : self } } # [ doc = "Bit 12 - DBG_IWDEG_STOP" ] # [ inline ( always ) ] pub fn dbg_iwdeg_stop ( & mut self ) -> _DbgIwdegStopW { _DbgIwdegStopW { w : self } } # [ doc = "Bit 21 - DBG_J2C1_SMBUS_TIMEOUT" ] # [ inline ( always ) ] pub fn dbg_j2c1_smbus_timeout ( & mut self ) -> _DbgJ2c1SmbusTimeoutW { _DbgJ2c1SmbusTimeoutW { w : self } } # [ doc = "Bit 22 - DBG_J2C2_SMBUS_TIMEOUT" ] # [ inline ( always ) ] pub fn dbg_j2c2_smbus_timeout ( & mut self ) -> _DbgJ2c2SmbusTimeoutW { _DbgJ2c2SmbusTimeoutW { w : self } } # [ doc = "Bit 23 - DBG_J2C3SMBUS_TIMEOUT" ] # [ inline ( always ) ] pub fn dbg_j2c3smbus_timeout ( & mut self ) -> _DbgJ2c3smbusTimeoutW { _DbgJ2c3smbusTimeoutW { w : self } } # [ doc = "Bit 25 - DBG_CAN1_STOP" ] # [ inline ( always ) ] pub fn dbg_can1_stop ( & mut self ) -> _DbgCan1StopW { _DbgCan1StopW { w : self } } # [ doc = "Bit 26 - DBG_CAN2_STOP" ] # [ inline ( always ) ] pub fn dbg_can2_stop ( & mut self ) -> _DbgCan2StopW { _DbgCan2StopW { w : self } } }