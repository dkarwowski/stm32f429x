# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: DbgmcuCr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct DbgSleepR { bits : u8 } impl DbgSleepR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgStopR { bits : u8 } impl DbgStopR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct DbgStandbyR { bits : u8 } impl DbgStandbyR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TraceIoenR { bits : u8 } impl TraceIoenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct TraceModeR { bits : u8 } impl TraceModeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _DbgSleepW < 'a > { w : & 'a mut W } impl < 'a > _DbgSleepW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgStopW < 'a > { w : & 'a mut W } impl < 'a > _DbgStopW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _DbgStandbyW < 'a > { w : & 'a mut W } impl < 'a > _DbgStandbyW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TraceIoenW < 'a > { w : & 'a mut W } impl < 'a > _TraceIoenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _TraceModeW < 'a > { w : & 'a mut W } impl < 'a > _TraceModeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - DBG_SLEEP" ] # [ inline ( always ) ] pub fn dbg_sleep ( & self ) -> DbgSleepR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgSleepR { bits } } # [ doc = "Bit 1 - DBG_STOP" ] # [ inline ( always ) ] pub fn dbg_stop ( & self ) -> DbgStopR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgStopR { bits } } # [ doc = "Bit 2 - DBG_STANDBY" ] # [ inline ( always ) ] pub fn dbg_standby ( & self ) -> DbgStandbyR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; DbgStandbyR { bits } } # [ doc = "Bit 5 - TRACE_IOEN" ] # [ inline ( always ) ] pub fn trace_ioen ( & self ) -> TraceIoenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TraceIoenR { bits } } # [ doc = "Bits 6:7 - TRACE_MODE" ] # [ inline ( always ) ] pub fn trace_mode ( & self ) -> TraceModeR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; TraceModeR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - DBG_SLEEP" ] # [ inline ( always ) ] pub fn dbg_sleep ( & mut self ) -> _DbgSleepW { _DbgSleepW { w : self } } # [ doc = "Bit 1 - DBG_STOP" ] # [ inline ( always ) ] pub fn dbg_stop ( & mut self ) -> _DbgStopW { _DbgStopW { w : self } } # [ doc = "Bit 2 - DBG_STANDBY" ] # [ inline ( always ) ] pub fn dbg_standby ( & mut self ) -> _DbgStandbyW { _DbgStandbyW { w : self } } # [ doc = "Bit 5 - TRACE_IOEN" ] # [ inline ( always ) ] pub fn trace_ioen ( & mut self ) -> _TraceIoenW { _TraceIoenW { w : self } } # [ doc = "Bits 6:7 - TRACE_MODE" ] # [ inline ( always ) ] pub fn trace_mode ( & mut self ) -> _TraceModeW { _TraceModeW { w : self } } }