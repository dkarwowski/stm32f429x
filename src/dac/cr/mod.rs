# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Cr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct Dmaudrie2R { bits : u8 } impl Dmaudrie2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Dmaen2R { bits : u8 } impl Dmaen2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Mamp2R { bits : u8 } impl Mamp2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Wave2R { bits : u8 } impl Wave2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tsel2R { bits : u8 } impl Tsel2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ten2R { bits : u8 } impl Ten2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Boff2R { bits : u8 } impl Boff2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct En2R { bits : u8 } impl En2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Dmaudrie1R { bits : u8 } impl Dmaudrie1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Dmaen1R { bits : u8 } impl Dmaen1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Mamp1R { bits : u8 } impl Mamp1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Wave1R { bits : u8 } impl Wave1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Tsel1R { bits : u8 } impl Tsel1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ten1R { bits : u8 } impl Ten1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Boff1R { bits : u8 } impl Boff1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct En1R { bits : u8 } impl En1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Dmaudrie2W < 'a > { w : & 'a mut W } impl < 'a > _Dmaudrie2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 29 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Dmaen2W < 'a > { w : & 'a mut W } impl < 'a > _Dmaen2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 28 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Mamp2W < 'a > { w : & 'a mut W } impl < 'a > _Mamp2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 24 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Wave2W < 'a > { w : & 'a mut W } impl < 'a > _Wave2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 22 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Tsel2W < 'a > { w : & 'a mut W } impl < 'a > _Tsel2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 19 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Ten2W < 'a > { w : & 'a mut W } impl < 'a > _Ten2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Boff2W < 'a > { w : & 'a mut W } impl < 'a > _Boff2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _En2W < 'a > { w : & 'a mut W } impl < 'a > _En2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Dmaudrie1W < 'a > { w : & 'a mut W } impl < 'a > _Dmaudrie1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Dmaen1W < 'a > { w : & 'a mut W } impl < 'a > _Dmaen1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Mamp1W < 'a > { w : & 'a mut W } impl < 'a > _Mamp1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Wave1W < 'a > { w : & 'a mut W } impl < 'a > _Wave1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Tsel1W < 'a > { w : & 'a mut W } impl < 'a > _Tsel1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Ten1W < 'a > { w : & 'a mut W } impl < 'a > _Ten1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Boff1W < 'a > { w : & 'a mut W } impl < 'a > _Boff1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _En1W < 'a > { w : & 'a mut W } impl < 'a > _En1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 29 - DAC channel2 DMA underrun interrupt enable" ] # [ inline ( always ) ] pub fn dmaudrie2 ( & self ) -> Dmaudrie2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 29 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Dmaudrie2R { bits } } # [ doc = "Bit 28 - DAC channel2 DMA enable" ] # [ inline ( always ) ] pub fn dmaen2 ( & self ) -> Dmaen2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 28 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Dmaen2R { bits } } # [ doc = "Bits 24:27 - DAC channel2 mask/amplitude selector" ] # [ inline ( always ) ] pub fn mamp2 ( & self ) -> Mamp2R { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 24 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Mamp2R { bits } } # [ doc = "Bits 22:23 - DAC channel2 noise/triangle wave generation enable" ] # [ inline ( always ) ] pub fn wave2 ( & self ) -> Wave2R { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Wave2R { bits } } # [ doc = "Bits 19:21 - DAC channel2 trigger selection" ] # [ inline ( always ) ] pub fn tsel2 ( & self ) -> Tsel2R { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tsel2R { bits } } # [ doc = "Bit 18 - DAC channel2 trigger enable" ] # [ inline ( always ) ] pub fn ten2 ( & self ) -> Ten2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ten2R { bits } } # [ doc = "Bit 17 - DAC channel2 output buffer disable" ] # [ inline ( always ) ] pub fn boff2 ( & self ) -> Boff2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Boff2R { bits } } # [ doc = "Bit 16 - DAC channel2 enable" ] # [ inline ( always ) ] pub fn en2 ( & self ) -> En2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; En2R { bits } } # [ doc = "Bit 13 - DAC channel1 DMA Underrun Interrupt enable" ] # [ inline ( always ) ] pub fn dmaudrie1 ( & self ) -> Dmaudrie1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Dmaudrie1R { bits } } # [ doc = "Bit 12 - DAC channel1 DMA enable" ] # [ inline ( always ) ] pub fn dmaen1 ( & self ) -> Dmaen1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Dmaen1R { bits } } # [ doc = "Bits 8:11 - DAC channel1 mask/amplitude selector" ] # [ inline ( always ) ] pub fn mamp1 ( & self ) -> Mamp1R { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Mamp1R { bits } } # [ doc = "Bits 6:7 - DAC channel1 noise/triangle wave generation enable" ] # [ inline ( always ) ] pub fn wave1 ( & self ) -> Wave1R { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Wave1R { bits } } # [ doc = "Bits 3:5 - DAC channel1 trigger selection" ] # [ inline ( always ) ] pub fn tsel1 ( & self ) -> Tsel1R { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Tsel1R { bits } } # [ doc = "Bit 2 - DAC channel1 trigger enable" ] # [ inline ( always ) ] pub fn ten1 ( & self ) -> Ten1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ten1R { bits } } # [ doc = "Bit 1 - DAC channel1 output buffer disable" ] # [ inline ( always ) ] pub fn boff1 ( & self ) -> Boff1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Boff1R { bits } } # [ doc = "Bit 0 - DAC channel1 enable" ] # [ inline ( always ) ] pub fn en1 ( & self ) -> En1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; En1R { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 29 - DAC channel2 DMA underrun interrupt enable" ] # [ inline ( always ) ] pub fn dmaudrie2 ( & mut self ) -> _Dmaudrie2W { _Dmaudrie2W { w : self } } # [ doc = "Bit 28 - DAC channel2 DMA enable" ] # [ inline ( always ) ] pub fn dmaen2 ( & mut self ) -> _Dmaen2W { _Dmaen2W { w : self } } # [ doc = "Bits 24:27 - DAC channel2 mask/amplitude selector" ] # [ inline ( always ) ] pub fn mamp2 ( & mut self ) -> _Mamp2W { _Mamp2W { w : self } } # [ doc = "Bits 22:23 - DAC channel2 noise/triangle wave generation enable" ] # [ inline ( always ) ] pub fn wave2 ( & mut self ) -> _Wave2W { _Wave2W { w : self } } # [ doc = "Bits 19:21 - DAC channel2 trigger selection" ] # [ inline ( always ) ] pub fn tsel2 ( & mut self ) -> _Tsel2W { _Tsel2W { w : self } } # [ doc = "Bit 18 - DAC channel2 trigger enable" ] # [ inline ( always ) ] pub fn ten2 ( & mut self ) -> _Ten2W { _Ten2W { w : self } } # [ doc = "Bit 17 - DAC channel2 output buffer disable" ] # [ inline ( always ) ] pub fn boff2 ( & mut self ) -> _Boff2W { _Boff2W { w : self } } # [ doc = "Bit 16 - DAC channel2 enable" ] # [ inline ( always ) ] pub fn en2 ( & mut self ) -> _En2W { _En2W { w : self } } # [ doc = "Bit 13 - DAC channel1 DMA Underrun Interrupt enable" ] # [ inline ( always ) ] pub fn dmaudrie1 ( & mut self ) -> _Dmaudrie1W { _Dmaudrie1W { w : self } } # [ doc = "Bit 12 - DAC channel1 DMA enable" ] # [ inline ( always ) ] pub fn dmaen1 ( & mut self ) -> _Dmaen1W { _Dmaen1W { w : self } } # [ doc = "Bits 8:11 - DAC channel1 mask/amplitude selector" ] # [ inline ( always ) ] pub fn mamp1 ( & mut self ) -> _Mamp1W { _Mamp1W { w : self } } # [ doc = "Bits 6:7 - DAC channel1 noise/triangle wave generation enable" ] # [ inline ( always ) ] pub fn wave1 ( & mut self ) -> _Wave1W { _Wave1W { w : self } } # [ doc = "Bits 3:5 - DAC channel1 trigger selection" ] # [ inline ( always ) ] pub fn tsel1 ( & mut self ) -> _Tsel1W { _Tsel1W { w : self } } # [ doc = "Bit 2 - DAC channel1 trigger enable" ] # [ inline ( always ) ] pub fn ten1 ( & mut self ) -> _Ten1W { _Ten1W { w : self } } # [ doc = "Bit 1 - DAC channel1 output buffer disable" ] # [ inline ( always ) ] pub fn boff1 ( & mut self ) -> _Boff1W { _Boff1W { w : self } } # [ doc = "Bit 0 - DAC channel1 enable" ] # [ inline ( always ) ] pub fn en1 ( & mut self ) -> _En1W { _En1W { w : self } } }