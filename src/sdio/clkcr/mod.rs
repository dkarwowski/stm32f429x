# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Clkcr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct HwfcEnR { bits : u8 } impl HwfcEnR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct NegedgeR { bits : u8 } impl NegedgeR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct WidbusR { bits : u8 } impl WidbusR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct BypassR { bits : u8 } impl BypassR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PwrsavR { bits : u8 } impl PwrsavR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ClkenR { bits : u8 } impl ClkenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ClkdivR { bits : u8 } impl ClkdivR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _HwfcEnW < 'a > { w : & 'a mut W } impl < 'a > _HwfcEnW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _NegedgeW < 'a > { w : & 'a mut W } impl < 'a > _NegedgeW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _WidbusW < 'a > { w : & 'a mut W } impl < 'a > _WidbusW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _BypassW < 'a > { w : & 'a mut W } impl < 'a > _BypassW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PwrsavW < 'a > { w : & 'a mut W } impl < 'a > _PwrsavW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ClkenW < 'a > { w : & 'a mut W } impl < 'a > _ClkenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ClkdivW < 'a > { w : & 'a mut W } impl < 'a > _ClkdivW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 255 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 14 - HW Flow Control enable" ] # [ inline ( always ) ] pub fn hwfc_en ( & self ) -> HwfcEnR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HwfcEnR { bits } } # [ doc = "Bit 13 - SDIO_CK dephasing selection bit" ] # [ inline ( always ) ] pub fn negedge ( & self ) -> NegedgeR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; NegedgeR { bits } } # [ doc = "Bits 11:12 - Wide bus mode enable bit" ] # [ inline ( always ) ] pub fn widbus ( & self ) -> WidbusR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; WidbusR { bits } } # [ doc = "Bit 10 - Clock divider bypass enable bit" ] # [ inline ( always ) ] pub fn bypass ( & self ) -> BypassR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BypassR { bits } } # [ doc = "Bit 9 - Power saving configuration bit" ] # [ inline ( always ) ] pub fn pwrsav ( & self ) -> PwrsavR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PwrsavR { bits } } # [ doc = "Bit 8 - Clock enable bit" ] # [ inline ( always ) ] pub fn clken ( & self ) -> ClkenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ClkenR { bits } } # [ doc = "Bits 0:7 - Clock divide factor" ] # [ inline ( always ) ] pub fn clkdiv ( & self ) -> ClkdivR { let bits = { const MASK : u8 = 255 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ClkdivR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 14 - HW Flow Control enable" ] # [ inline ( always ) ] pub fn hwfc_en ( & mut self ) -> _HwfcEnW { _HwfcEnW { w : self } } # [ doc = "Bit 13 - SDIO_CK dephasing selection bit" ] # [ inline ( always ) ] pub fn negedge ( & mut self ) -> _NegedgeW { _NegedgeW { w : self } } # [ doc = "Bits 11:12 - Wide bus mode enable bit" ] # [ inline ( always ) ] pub fn widbus ( & mut self ) -> _WidbusW { _WidbusW { w : self } } # [ doc = "Bit 10 - Clock divider bypass enable bit" ] # [ inline ( always ) ] pub fn bypass ( & mut self ) -> _BypassW { _BypassW { w : self } } # [ doc = "Bit 9 - Power saving configuration bit" ] # [ inline ( always ) ] pub fn pwrsav ( & mut self ) -> _PwrsavW { _PwrsavW { w : self } } # [ doc = "Bit 8 - Clock enable bit" ] # [ inline ( always ) ] pub fn clken ( & mut self ) -> _ClkenW { _ClkenW { w : self } } # [ doc = "Bits 0:7 - Clock divide factor" ] # [ inline ( always ) ] pub fn clkdiv ( & mut self ) -> _ClkdivW { _ClkdivW { w : self } } }