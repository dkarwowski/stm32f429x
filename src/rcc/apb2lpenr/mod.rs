# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Apb2lpenr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = "Possible values of the field `TIM1LPEN`" ] pub type Tim1lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `TIM8LPEN`" ] pub type Tim8lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `USART1LPEN`" ] pub type Usart1lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `USART6LPEN`" ] pub type Usart6lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `ADC1LPEN`" ] pub type Adc1lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `ADC2LPEN`" ] pub type Adc2lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `ADC3LPEN`" ] pub type Adc3lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `SDIOLPEN`" ] pub type SdiolpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `SPI1LPEN`" ] pub type Spi1lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `SPI4LPEN`" ] pub type Spi4lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `SYSCFGLPEN`" ] pub type SyscfglpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `TIM9LPEN`" ] pub type Tim9lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `TIM10LPEN`" ] pub type Tim10lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `TIM11LPEN`" ] pub type Tim11lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `SPI5LPEN`" ] pub type Spi5lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `SPI6LPEN`" ] pub type Spi6lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `SAI1LPEN`" ] pub type Sai1lpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Possible values of the field `LTDCLPEN`" ] pub type LtdclpenR = super :: ahb1enr :: OtghsulpienR ; # [ doc = "Values that can be written to the field `TIM1LPEN`" ] pub type Tim1lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Tim1lpenW < 'a > { w : & 'a mut W } impl < 'a > _Tim1lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Tim1lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `TIM8LPEN`" ] pub type Tim8lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Tim8lpenW < 'a > { w : & 'a mut W } impl < 'a > _Tim8lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Tim8lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `USART1LPEN`" ] pub type Usart1lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Usart1lpenW < 'a > { w : & 'a mut W } impl < 'a > _Usart1lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Usart1lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `USART6LPEN`" ] pub type Usart6lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Usart6lpenW < 'a > { w : & 'a mut W } impl < 'a > _Usart6lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Usart6lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `ADC1LPEN`" ] pub type Adc1lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Adc1lpenW < 'a > { w : & 'a mut W } impl < 'a > _Adc1lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Adc1lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `ADC2LPEN`" ] pub type Adc2lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Adc2lpenW < 'a > { w : & 'a mut W } impl < 'a > _Adc2lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Adc2lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `ADC3LPEN`" ] pub type Adc3lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Adc3lpenW < 'a > { w : & 'a mut W } impl < 'a > _Adc3lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Adc3lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `SDIOLPEN`" ] pub type SdiolpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _SdiolpenW < 'a > { w : & 'a mut W } impl < 'a > _SdiolpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : SdiolpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `SPI1LPEN`" ] pub type Spi1lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Spi1lpenW < 'a > { w : & 'a mut W } impl < 'a > _Spi1lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Spi1lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `SPI4LPEN`" ] pub type Spi4lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Spi4lpenW < 'a > { w : & 'a mut W } impl < 'a > _Spi4lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Spi4lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `SYSCFGLPEN`" ] pub type SyscfglpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _SyscfglpenW < 'a > { w : & 'a mut W } impl < 'a > _SyscfglpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : SyscfglpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `TIM9LPEN`" ] pub type Tim9lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Tim9lpenW < 'a > { w : & 'a mut W } impl < 'a > _Tim9lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Tim9lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `TIM10LPEN`" ] pub type Tim10lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Tim10lpenW < 'a > { w : & 'a mut W } impl < 'a > _Tim10lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Tim10lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `TIM11LPEN`" ] pub type Tim11lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Tim11lpenW < 'a > { w : & 'a mut W } impl < 'a > _Tim11lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Tim11lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `SPI5LPEN`" ] pub type Spi5lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Spi5lpenW < 'a > { w : & 'a mut W } impl < 'a > _Spi5lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Spi5lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `SPI6LPEN`" ] pub type Spi6lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Spi6lpenW < 'a > { w : & 'a mut W } impl < 'a > _Spi6lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Spi6lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `SAI1LPEN`" ] pub type Sai1lpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _Sai1lpenW < 'a > { w : & 'a mut W } impl < 'a > _Sai1lpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : Sai1lpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = "Values that can be written to the field `LTDCLPEN`" ] pub type LtdclpenW = super :: ahb1enr :: OtghsulpienW ; # [ doc = r" Proxy" ] pub struct _LtdclpenW < 'a > { w : & 'a mut W } impl < 'a > _LtdclpenW < 'a > { # [ doc = r" Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : LtdclpenW ) -> & 'a mut W { { self . bits ( variant . _bits ( ) ) } } # [ doc = "Enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Enabled ) } # [ doc = "Disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( super :: ahb1enr :: OtghsulpienW :: Disabled ) } # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 26 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 0 - TIM1 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn tim1lpen ( & self ) -> Tim1lpenR { Tim1lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 1 - TIM8 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn tim8lpen ( & self ) -> Tim8lpenR { Tim8lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 4 - USART1 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn usart1lpen ( & self ) -> Usart1lpenR { Usart1lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 5 - USART6 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn usart6lpen ( & self ) -> Usart6lpenR { Usart6lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 8 - ADC1 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn adc1lpen ( & self ) -> Adc1lpenR { Adc1lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 9 - ADC2 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn adc2lpen ( & self ) -> Adc2lpenR { Adc2lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 10 - ADC 3 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn adc3lpen ( & self ) -> Adc3lpenR { Adc3lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 11 - SDIO clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn sdiolpen ( & self ) -> SdiolpenR { SdiolpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 12 - SPI 1 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn spi1lpen ( & self ) -> Spi1lpenR { Spi1lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 13 - SPI 4 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn spi4lpen ( & self ) -> Spi4lpenR { Spi4lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 14 - System configuration controller clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn syscfglpen ( & self ) -> SyscfglpenR { SyscfglpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 16 - TIM9 clock enable during sleep mode" ] # [ inline ( always ) ] pub fn tim9lpen ( & self ) -> Tim9lpenR { Tim9lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 17 - TIM10 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn tim10lpen ( & self ) -> Tim10lpenR { Tim10lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 18 - TIM11 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn tim11lpen ( & self ) -> Tim11lpenR { Tim11lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 20 - SPI 5 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn spi5lpen ( & self ) -> Spi5lpenR { Spi5lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 21 - SPI 6 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn spi6lpen ( & self ) -> Spi6lpenR { Spi6lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 22 - SAI1 clock enable" ] # [ inline ( always ) ] pub fn sai1lpen ( & self ) -> Sai1lpenR { Sai1lpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } # [ doc = "Bit 26 - LTDC clock enable" ] # [ inline ( always ) ] pub fn ltdclpen ( & self ) -> LtdclpenR { LtdclpenR :: _from ( { const MASK : u8 = 1 ; const OFFSET : u8 = 26 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ) } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 483123 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - TIM1 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn tim1lpen ( & mut self ) -> _Tim1lpenW { _Tim1lpenW { w : self } } # [ doc = "Bit 1 - TIM8 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn tim8lpen ( & mut self ) -> _Tim8lpenW { _Tim8lpenW { w : self } } # [ doc = "Bit 4 - USART1 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn usart1lpen ( & mut self ) -> _Usart1lpenW { _Usart1lpenW { w : self } } # [ doc = "Bit 5 - USART6 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn usart6lpen ( & mut self ) -> _Usart6lpenW { _Usart6lpenW { w : self } } # [ doc = "Bit 8 - ADC1 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn adc1lpen ( & mut self ) -> _Adc1lpenW { _Adc1lpenW { w : self } } # [ doc = "Bit 9 - ADC2 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn adc2lpen ( & mut self ) -> _Adc2lpenW { _Adc2lpenW { w : self } } # [ doc = "Bit 10 - ADC 3 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn adc3lpen ( & mut self ) -> _Adc3lpenW { _Adc3lpenW { w : self } } # [ doc = "Bit 11 - SDIO clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn sdiolpen ( & mut self ) -> _SdiolpenW { _SdiolpenW { w : self } } # [ doc = "Bit 12 - SPI 1 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn spi1lpen ( & mut self ) -> _Spi1lpenW { _Spi1lpenW { w : self } } # [ doc = "Bit 13 - SPI 4 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn spi4lpen ( & mut self ) -> _Spi4lpenW { _Spi4lpenW { w : self } } # [ doc = "Bit 14 - System configuration controller clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn syscfglpen ( & mut self ) -> _SyscfglpenW { _SyscfglpenW { w : self } } # [ doc = "Bit 16 - TIM9 clock enable during sleep mode" ] # [ inline ( always ) ] pub fn tim9lpen ( & mut self ) -> _Tim9lpenW { _Tim9lpenW { w : self } } # [ doc = "Bit 17 - TIM10 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn tim10lpen ( & mut self ) -> _Tim10lpenW { _Tim10lpenW { w : self } } # [ doc = "Bit 18 - TIM11 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn tim11lpen ( & mut self ) -> _Tim11lpenW { _Tim11lpenW { w : self } } # [ doc = "Bit 20 - SPI 5 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn spi5lpen ( & mut self ) -> _Spi5lpenW { _Spi5lpenW { w : self } } # [ doc = "Bit 21 - SPI 6 clock enable during Sleep mode" ] # [ inline ( always ) ] pub fn spi6lpen ( & mut self ) -> _Spi6lpenW { _Spi6lpenW { w : self } } # [ doc = "Bit 22 - SAI1 clock enable" ] # [ inline ( always ) ] pub fn sai1lpen ( & mut self ) -> _Sai1lpenW { _Sai1lpenW { w : self } } # [ doc = "Bit 26 - LTDC clock enable" ] # [ inline ( always ) ] pub fn ltdclpen ( & mut self ) -> _LtdclpenW { _LtdclpenW { w : self } } }