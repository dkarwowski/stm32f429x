# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Cir { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct PllsairdyieR { bits : u8 } impl PllsairdyieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Plli2srdyieR { bits : u8 } impl Plli2srdyieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PllrdyieR { bits : u8 } impl PllrdyieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HserdyieR { bits : u8 } impl HserdyieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HsirdyieR { bits : u8 } impl HsirdyieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LserdyieR { bits : u8 } impl LserdyieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LsirdyieR { bits : u8 } impl LsirdyieR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct CssfR { bits : u8 } impl CssfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PllsairdyfR { bits : u8 } impl PllsairdyfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Plli2srdyfR { bits : u8 } impl Plli2srdyfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct PllrdyfR { bits : u8 } impl PllrdyfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HserdyfR { bits : u8 } impl HserdyfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HsirdyfR { bits : u8 } impl HsirdyfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LserdyfR { bits : u8 } impl LserdyfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LsirdyfR { bits : u8 } impl LsirdyfR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _CsscW < 'a > { w : & 'a mut W } impl < 'a > _CsscW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 23 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PllsairdycW < 'a > { w : & 'a mut W } impl < 'a > _PllsairdycW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Plli2srdycW < 'a > { w : & 'a mut W } impl < 'a > _Plli2srdycW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PllrdycW < 'a > { w : & 'a mut W } impl < 'a > _PllrdycW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _HserdycW < 'a > { w : & 'a mut W } impl < 'a > _HserdycW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _HsirdycW < 'a > { w : & 'a mut W } impl < 'a > _HsirdycW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LserdycW < 'a > { w : & 'a mut W } impl < 'a > _LserdycW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LsirdycW < 'a > { w : & 'a mut W } impl < 'a > _LsirdycW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PllsairdyieW < 'a > { w : & 'a mut W } impl < 'a > _PllsairdyieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Plli2srdyieW < 'a > { w : & 'a mut W } impl < 'a > _Plli2srdyieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _PllrdyieW < 'a > { w : & 'a mut W } impl < 'a > _PllrdyieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _HserdyieW < 'a > { w : & 'a mut W } impl < 'a > _HserdyieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _HsirdyieW < 'a > { w : & 'a mut W } impl < 'a > _HsirdyieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LserdyieW < 'a > { w : & 'a mut W } impl < 'a > _LserdyieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LsirdyieW < 'a > { w : & 'a mut W } impl < 'a > _LsirdyieW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 14 - PLLSAI Ready Interrupt Enable" ] # [ inline ( always ) ] pub fn pllsairdyie ( & self ) -> PllsairdyieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PllsairdyieR { bits } } # [ doc = "Bit 13 - PLLI2S ready interrupt enable" ] # [ inline ( always ) ] pub fn plli2srdyie ( & self ) -> Plli2srdyieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Plli2srdyieR { bits } } # [ doc = "Bit 12 - Main PLL (PLL) ready interrupt enable" ] # [ inline ( always ) ] pub fn pllrdyie ( & self ) -> PllrdyieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PllrdyieR { bits } } # [ doc = "Bit 11 - HSE ready interrupt enable" ] # [ inline ( always ) ] pub fn hserdyie ( & self ) -> HserdyieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HserdyieR { bits } } # [ doc = "Bit 10 - HSI ready interrupt enable" ] # [ inline ( always ) ] pub fn hsirdyie ( & self ) -> HsirdyieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HsirdyieR { bits } } # [ doc = "Bit 9 - LSE ready interrupt enable" ] # [ inline ( always ) ] pub fn lserdyie ( & self ) -> LserdyieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LserdyieR { bits } } # [ doc = "Bit 8 - LSI ready interrupt enable" ] # [ inline ( always ) ] pub fn lsirdyie ( & self ) -> LsirdyieR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LsirdyieR { bits } } # [ doc = "Bit 7 - Clock security system interrupt flag" ] # [ inline ( always ) ] pub fn cssf ( & self ) -> CssfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; CssfR { bits } } # [ doc = "Bit 6 - PLLSAI ready interrupt flag" ] # [ inline ( always ) ] pub fn pllsairdyf ( & self ) -> PllsairdyfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PllsairdyfR { bits } } # [ doc = "Bit 5 - PLLI2S ready interrupt flag" ] # [ inline ( always ) ] pub fn plli2srdyf ( & self ) -> Plli2srdyfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Plli2srdyfR { bits } } # [ doc = "Bit 4 - Main PLL (PLL) ready interrupt flag" ] # [ inline ( always ) ] pub fn pllrdyf ( & self ) -> PllrdyfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; PllrdyfR { bits } } # [ doc = "Bit 3 - HSE ready interrupt flag" ] # [ inline ( always ) ] pub fn hserdyf ( & self ) -> HserdyfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HserdyfR { bits } } # [ doc = "Bit 2 - HSI ready interrupt flag" ] # [ inline ( always ) ] pub fn hsirdyf ( & self ) -> HsirdyfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HsirdyfR { bits } } # [ doc = "Bit 1 - LSE ready interrupt flag" ] # [ inline ( always ) ] pub fn lserdyf ( & self ) -> LserdyfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LserdyfR { bits } } # [ doc = "Bit 0 - LSI ready interrupt flag" ] # [ inline ( always ) ] pub fn lsirdyf ( & self ) -> LsirdyfR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LsirdyfR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 23 - Clock security system interrupt clear" ] # [ inline ( always ) ] pub fn cssc ( & mut self ) -> _CsscW { _CsscW { w : self } } # [ doc = "Bit 22 - PLLSAI Ready Interrupt Clear" ] # [ inline ( always ) ] pub fn pllsairdyc ( & mut self ) -> _PllsairdycW { _PllsairdycW { w : self } } # [ doc = "Bit 21 - PLLI2S ready interrupt clear" ] # [ inline ( always ) ] pub fn plli2srdyc ( & mut self ) -> _Plli2srdycW { _Plli2srdycW { w : self } } # [ doc = "Bit 20 - Main PLL(PLL) ready interrupt clear" ] # [ inline ( always ) ] pub fn pllrdyc ( & mut self ) -> _PllrdycW { _PllrdycW { w : self } } # [ doc = "Bit 19 - HSE ready interrupt clear" ] # [ inline ( always ) ] pub fn hserdyc ( & mut self ) -> _HserdycW { _HserdycW { w : self } } # [ doc = "Bit 18 - HSI ready interrupt clear" ] # [ inline ( always ) ] pub fn hsirdyc ( & mut self ) -> _HsirdycW { _HsirdycW { w : self } } # [ doc = "Bit 17 - LSE ready interrupt clear" ] # [ inline ( always ) ] pub fn lserdyc ( & mut self ) -> _LserdycW { _LserdycW { w : self } } # [ doc = "Bit 16 - LSI ready interrupt clear" ] # [ inline ( always ) ] pub fn lsirdyc ( & mut self ) -> _LsirdycW { _LsirdycW { w : self } } # [ doc = "Bit 14 - PLLSAI Ready Interrupt Enable" ] # [ inline ( always ) ] pub fn pllsairdyie ( & mut self ) -> _PllsairdyieW { _PllsairdyieW { w : self } } # [ doc = "Bit 13 - PLLI2S ready interrupt enable" ] # [ inline ( always ) ] pub fn plli2srdyie ( & mut self ) -> _Plli2srdyieW { _Plli2srdyieW { w : self } } # [ doc = "Bit 12 - Main PLL (PLL) ready interrupt enable" ] # [ inline ( always ) ] pub fn pllrdyie ( & mut self ) -> _PllrdyieW { _PllrdyieW { w : self } } # [ doc = "Bit 11 - HSE ready interrupt enable" ] # [ inline ( always ) ] pub fn hserdyie ( & mut self ) -> _HserdyieW { _HserdyieW { w : self } } # [ doc = "Bit 10 - HSI ready interrupt enable" ] # [ inline ( always ) ] pub fn hsirdyie ( & mut self ) -> _HsirdyieW { _HsirdyieW { w : self } } # [ doc = "Bit 9 - LSE ready interrupt enable" ] # [ inline ( always ) ] pub fn lserdyie ( & mut self ) -> _LserdyieW { _LserdyieW { w : self } } # [ doc = "Bit 8 - LSI ready interrupt enable" ] # [ inline ( always ) ] pub fn lsirdyie ( & mut self ) -> _LsirdyieW { _LsirdyieW { w : self } } }