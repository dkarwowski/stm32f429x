# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Cfgr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct Mco2R { bits : u8 } impl Mco2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Mco2preR { bits : u8 } impl Mco2preR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Mco1preR { bits : u8 } impl Mco1preR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct I2ssrcR { bits : u8 } impl I2ssrcR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Mco1R { bits : u8 } impl Mco1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RtcpreR { bits : u8 } impl RtcpreR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ppre2R { bits : u8 } impl Ppre2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ppre1R { bits : u8 } impl Ppre1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct HpreR { bits : u8 } impl HpreR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Sws1R { bits : u8 } impl Sws1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Sws0R { bits : u8 } impl Sws0R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Sw1R { bits : u8 } impl Sw1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Sw0R { bits : u8 } impl Sw0R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Mco2W < 'a > { w : & 'a mut W } impl < 'a > _Mco2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 30 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Mco2preW < 'a > { w : & 'a mut W } impl < 'a > _Mco2preW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 27 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Mco1preW < 'a > { w : & 'a mut W } impl < 'a > _Mco1preW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 24 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _I2ssrcW < 'a > { w : & 'a mut W } impl < 'a > _I2ssrcW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 23 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Mco1W < 'a > { w : & 'a mut W } impl < 'a > _Mco1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 21 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _RtcpreW < 'a > { w : & 'a mut W } impl < 'a > _RtcpreW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Ppre2W < 'a > { w : & 'a mut W } impl < 'a > _Ppre2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Ppre1W < 'a > { w : & 'a mut W } impl < 'a > _Ppre1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _HpreW < 'a > { w : & 'a mut W } impl < 'a > _HpreW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Sw1W < 'a > { w : & 'a mut W } impl < 'a > _Sw1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Sw0W < 'a > { w : & 'a mut W } impl < 'a > _Sw0W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 30:31 - Microcontroller clock output 2" ] # [ inline ( always ) ] pub fn mco2 ( & self ) -> Mco2R { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 30 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Mco2R { bits } } # [ doc = "Bits 27:29 - MCO2 prescaler" ] # [ inline ( always ) ] pub fn mco2pre ( & self ) -> Mco2preR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 27 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Mco2preR { bits } } # [ doc = "Bits 24:26 - MCO1 prescaler" ] # [ inline ( always ) ] pub fn mco1pre ( & self ) -> Mco1preR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 24 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Mco1preR { bits } } # [ doc = "Bit 23 - I2S clock selection" ] # [ inline ( always ) ] pub fn i2ssrc ( & self ) -> I2ssrcR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 23 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; I2ssrcR { bits } } # [ doc = "Bits 21:22 - Microcontroller clock output 1" ] # [ inline ( always ) ] pub fn mco1 ( & self ) -> Mco1R { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Mco1R { bits } } # [ doc = "Bits 16:20 - HSE division factor for RTC clock" ] # [ inline ( always ) ] pub fn rtcpre ( & self ) -> RtcpreR { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RtcpreR { bits } } # [ doc = "Bits 13:15 - APB high-speed prescaler (APB2)" ] # [ inline ( always ) ] pub fn ppre2 ( & self ) -> Ppre2R { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ppre2R { bits } } # [ doc = "Bits 10:12 - APB Low speed prescaler (APB1)" ] # [ inline ( always ) ] pub fn ppre1 ( & self ) -> Ppre1R { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ppre1R { bits } } # [ doc = "Bits 4:7 - AHB prescaler" ] # [ inline ( always ) ] pub fn hpre ( & self ) -> HpreR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; HpreR { bits } } # [ doc = "Bit 3 - System clock switch status" ] # [ inline ( always ) ] pub fn sws1 ( & self ) -> Sws1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Sws1R { bits } } # [ doc = "Bit 2 - System clock switch status" ] # [ inline ( always ) ] pub fn sws0 ( & self ) -> Sws0R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Sws0R { bits } } # [ doc = "Bit 1 - System clock switch" ] # [ inline ( always ) ] pub fn sw1 ( & self ) -> Sw1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Sw1R { bits } } # [ doc = "Bit 0 - System clock switch" ] # [ inline ( always ) ] pub fn sw0 ( & self ) -> Sw0R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Sw0R { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 30:31 - Microcontroller clock output 2" ] # [ inline ( always ) ] pub fn mco2 ( & mut self ) -> _Mco2W { _Mco2W { w : self } } # [ doc = "Bits 27:29 - MCO2 prescaler" ] # [ inline ( always ) ] pub fn mco2pre ( & mut self ) -> _Mco2preW { _Mco2preW { w : self } } # [ doc = "Bits 24:26 - MCO1 prescaler" ] # [ inline ( always ) ] pub fn mco1pre ( & mut self ) -> _Mco1preW { _Mco1preW { w : self } } # [ doc = "Bit 23 - I2S clock selection" ] # [ inline ( always ) ] pub fn i2ssrc ( & mut self ) -> _I2ssrcW { _I2ssrcW { w : self } } # [ doc = "Bits 21:22 - Microcontroller clock output 1" ] # [ inline ( always ) ] pub fn mco1 ( & mut self ) -> _Mco1W { _Mco1W { w : self } } # [ doc = "Bits 16:20 - HSE division factor for RTC clock" ] # [ inline ( always ) ] pub fn rtcpre ( & mut self ) -> _RtcpreW { _RtcpreW { w : self } } # [ doc = "Bits 13:15 - APB high-speed prescaler (APB2)" ] # [ inline ( always ) ] pub fn ppre2 ( & mut self ) -> _Ppre2W { _Ppre2W { w : self } } # [ doc = "Bits 10:12 - APB Low speed prescaler (APB1)" ] # [ inline ( always ) ] pub fn ppre1 ( & mut self ) -> _Ppre1W { _Ppre1W { w : self } } # [ doc = "Bits 4:7 - AHB prescaler" ] # [ inline ( always ) ] pub fn hpre ( & mut self ) -> _HpreW { _HpreW { w : self } } # [ doc = "Bit 1 - System clock switch" ] # [ inline ( always ) ] pub fn sw1 ( & mut self ) -> _Sw1W { _Sw1W { w : self } } # [ doc = "Bit 0 - System clock switch" ] # [ inline ( always ) ] pub fn sw0 ( & mut self ) -> _Sw0W { _Sw0W { w : self } } }