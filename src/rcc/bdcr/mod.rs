# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Bdcr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct BdrstR { bits : u8 } impl BdrstR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct RtcenR { bits : u8 } impl RtcenR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Rtcsel1R { bits : u8 } impl Rtcsel1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Rtcsel0R { bits : u8 } impl Rtcsel0R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LsebypR { bits : u8 } impl LsebypR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LserdyR { bits : u8 } impl LserdyR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct LseonR { bits : u8 } impl LseonR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _BdrstW < 'a > { w : & 'a mut W } impl < 'a > _BdrstW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _RtcenW < 'a > { w : & 'a mut W } impl < 'a > _RtcenW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Rtcsel1W < 'a > { w : & 'a mut W } impl < 'a > _Rtcsel1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Rtcsel0W < 'a > { w : & 'a mut W } impl < 'a > _Rtcsel0W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LsebypW < 'a > { w : & 'a mut W } impl < 'a > _LsebypW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _LseonW < 'a > { w : & 'a mut W } impl < 'a > _LseonW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 16 - Backup domain software reset" ] # [ inline ( always ) ] pub fn bdrst ( & self ) -> BdrstR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; BdrstR { bits } } # [ doc = "Bit 15 - RTC clock enable" ] # [ inline ( always ) ] pub fn rtcen ( & self ) -> RtcenR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; RtcenR { bits } } # [ doc = "Bit 9 - RTC clock source selection" ] # [ inline ( always ) ] pub fn rtcsel1 ( & self ) -> Rtcsel1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Rtcsel1R { bits } } # [ doc = "Bit 8 - RTC clock source selection" ] # [ inline ( always ) ] pub fn rtcsel0 ( & self ) -> Rtcsel0R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Rtcsel0R { bits } } # [ doc = "Bit 2 - External low-speed oscillator bypass" ] # [ inline ( always ) ] pub fn lsebyp ( & self ) -> LsebypR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LsebypR { bits } } # [ doc = "Bit 1 - External low-speed oscillator ready" ] # [ inline ( always ) ] pub fn lserdy ( & self ) -> LserdyR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LserdyR { bits } } # [ doc = "Bit 0 - External low-speed oscillator enable" ] # [ inline ( always ) ] pub fn lseon ( & self ) -> LseonR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LseonR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 16 - Backup domain software reset" ] # [ inline ( always ) ] pub fn bdrst ( & mut self ) -> _BdrstW { _BdrstW { w : self } } # [ doc = "Bit 15 - RTC clock enable" ] # [ inline ( always ) ] pub fn rtcen ( & mut self ) -> _RtcenW { _RtcenW { w : self } } # [ doc = "Bit 9 - RTC clock source selection" ] # [ inline ( always ) ] pub fn rtcsel1 ( & mut self ) -> _Rtcsel1W { _Rtcsel1W { w : self } } # [ doc = "Bit 8 - RTC clock source selection" ] # [ inline ( always ) ] pub fn rtcsel0 ( & mut self ) -> _Rtcsel0W { _Rtcsel0W { w : self } } # [ doc = "Bit 2 - External low-speed oscillator bypass" ] # [ inline ( always ) ] pub fn lsebyp ( & mut self ) -> _LsebypW { _LsebypW { w : self } } # [ doc = "Bit 0 - External low-speed oscillator enable" ] # [ inline ( always ) ] pub fn lseon ( & mut self ) -> _LseonW { _LseonW { w : self } } }