# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Sqr1 { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct LR { bits : u8 } impl LR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Sq16R { bits : u8 } impl Sq16R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Sq15R { bits : u8 } impl Sq15R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Sq14R { bits : u8 } impl Sq14R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Sq13R { bits : u8 } impl Sq13R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _LW < 'a > { w : & 'a mut W } impl < 'a > _LW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 15 ; const OFFSET : u8 = 20 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Sq16W < 'a > { w : & 'a mut W } impl < 'a > _Sq16W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Sq15W < 'a > { w : & 'a mut W } impl < 'a > _Sq15W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Sq14W < 'a > { w : & 'a mut W } impl < 'a > _Sq14W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Sq13W < 'a > { w : & 'a mut W } impl < 'a > _Sq13W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 20:23 - Regular channel sequence length" ] # [ inline ( always ) ] pub fn l ( & self ) -> LR { let bits = { const MASK : u8 = 15 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LR { bits } } # [ doc = "Bits 15:19 - 16th conversion in regular sequence" ] # [ inline ( always ) ] pub fn sq16 ( & self ) -> Sq16R { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Sq16R { bits } } # [ doc = "Bits 10:14 - 15th conversion in regular sequence" ] # [ inline ( always ) ] pub fn sq15 ( & self ) -> Sq15R { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Sq15R { bits } } # [ doc = "Bits 5:9 - 14th conversion in regular sequence" ] # [ inline ( always ) ] pub fn sq14 ( & self ) -> Sq14R { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Sq14R { bits } } # [ doc = "Bits 0:4 - 13th conversion in regular sequence" ] # [ inline ( always ) ] pub fn sq13 ( & self ) -> Sq13R { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Sq13R { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 20:23 - Regular channel sequence length" ] # [ inline ( always ) ] pub fn l ( & mut self ) -> _LW { _LW { w : self } } # [ doc = "Bits 15:19 - 16th conversion in regular sequence" ] # [ inline ( always ) ] pub fn sq16 ( & mut self ) -> _Sq16W { _Sq16W { w : self } } # [ doc = "Bits 10:14 - 15th conversion in regular sequence" ] # [ inline ( always ) ] pub fn sq15 ( & mut self ) -> _Sq15W { _Sq15W { w : self } } # [ doc = "Bits 5:9 - 14th conversion in regular sequence" ] # [ inline ( always ) ] pub fn sq14 ( & mut self ) -> _Sq14W { _Sq14W { w : self } } # [ doc = "Bits 0:4 - 13th conversion in regular sequence" ] # [ inline ( always ) ] pub fn sq13 ( & mut self ) -> _Sq13W { _Sq13W { w : self } } }