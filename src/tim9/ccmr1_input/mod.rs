# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Ccmr1Input { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct Ic2fR { bits : u8 } impl Ic2fR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ic2pcsR { bits : u8 } impl Ic2pcsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc2sR { bits : u8 } impl Cc2sR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Ic1fR { bits : u8 } impl Ic1fR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct IcpcsR { bits : u8 } impl IcpcsR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc1sR { bits : u8 } impl Cc1sR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Ic2fW < 'a > { w : & 'a mut W } impl < 'a > _Ic2fW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Ic2pcsW < 'a > { w : & 'a mut W } impl < 'a > _Ic2pcsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc2sW < 'a > { w : & 'a mut W } impl < 'a > _Cc2sW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Ic1fW < 'a > { w : & 'a mut W } impl < 'a > _Ic1fW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 7 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _IcpcsW < 'a > { w : & 'a mut W } impl < 'a > _IcpcsW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc1sW < 'a > { w : & 'a mut W } impl < 'a > _Cc1sW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 12:14 - Input capture 2 filter" ] # [ inline ( always ) ] pub fn ic2f ( & self ) -> Ic2fR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ic2fR { bits } } # [ doc = "Bits 10:11 - Input capture 2 prescaler" ] # [ inline ( always ) ] pub fn ic2pcs ( & self ) -> Ic2pcsR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ic2pcsR { bits } } # [ doc = "Bits 8:9 - Capture/Compare 2 selection" ] # [ inline ( always ) ] pub fn cc2s ( & self ) -> Cc2sR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc2sR { bits } } # [ doc = "Bits 4:6 - Input capture 1 filter" ] # [ inline ( always ) ] pub fn ic1f ( & self ) -> Ic1fR { let bits = { const MASK : u8 = 7 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Ic1fR { bits } } # [ doc = "Bits 2:3 - Input capture 1 prescaler" ] # [ inline ( always ) ] pub fn icpcs ( & self ) -> IcpcsR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; IcpcsR { bits } } # [ doc = "Bits 0:1 - Capture/Compare 1 selection" ] # [ inline ( always ) ] pub fn cc1s ( & self ) -> Cc1sR { let bits = { const MASK : u8 = 3 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc1sR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 12:14 - Input capture 2 filter" ] # [ inline ( always ) ] pub fn ic2f ( & mut self ) -> _Ic2fW { _Ic2fW { w : self } } # [ doc = "Bits 10:11 - Input capture 2 prescaler" ] # [ inline ( always ) ] pub fn ic2pcs ( & mut self ) -> _Ic2pcsW { _Ic2pcsW { w : self } } # [ doc = "Bits 8:9 - Capture/Compare 2 selection" ] # [ inline ( always ) ] pub fn cc2s ( & mut self ) -> _Cc2sW { _Cc2sW { w : self } } # [ doc = "Bits 4:6 - Input capture 1 filter" ] # [ inline ( always ) ] pub fn ic1f ( & mut self ) -> _Ic1fW { _Ic1fW { w : self } } # [ doc = "Bits 2:3 - Input capture 1 prescaler" ] # [ inline ( always ) ] pub fn icpcs ( & mut self ) -> _IcpcsW { _IcpcsW { w : self } } # [ doc = "Bits 0:1 - Capture/Compare 1 selection" ] # [ inline ( always ) ] pub fn cc1s ( & mut self ) -> _Cc1sW { _Cc1sW { w : self } } }