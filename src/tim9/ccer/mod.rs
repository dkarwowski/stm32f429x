# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Ccer { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct Cc2npR { bits : u8 } impl Cc2npR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc2pR { bits : u8 } impl Cc2pR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc2eR { bits : u8 } impl Cc2eR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc1npR { bits : u8 } impl Cc1npR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc1pR { bits : u8 } impl Cc1pR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Cc1eR { bits : u8 } impl Cc1eR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Cc2npW < 'a > { w : & 'a mut W } impl < 'a > _Cc2npW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc2pW < 'a > { w : & 'a mut W } impl < 'a > _Cc2pW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc2eW < 'a > { w : & 'a mut W } impl < 'a > _Cc2eW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc1npW < 'a > { w : & 'a mut W } impl < 'a > _Cc1npW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc1pW < 'a > { w : & 'a mut W } impl < 'a > _Cc1pW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Cc1eW < 'a > { w : & 'a mut W } impl < 'a > _Cc1eW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 7 - Capture/Compare 2 output Polarity" ] # [ inline ( always ) ] pub fn cc2np ( & self ) -> Cc2npR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc2npR { bits } } # [ doc = "Bit 5 - Capture/Compare 2 output Polarity" ] # [ inline ( always ) ] pub fn cc2p ( & self ) -> Cc2pR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc2pR { bits } } # [ doc = "Bit 4 - Capture/Compare 2 output enable" ] # [ inline ( always ) ] pub fn cc2e ( & self ) -> Cc2eR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc2eR { bits } } # [ doc = "Bit 3 - Capture/Compare 1 output Polarity" ] # [ inline ( always ) ] pub fn cc1np ( & self ) -> Cc1npR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc1npR { bits } } # [ doc = "Bit 1 - Capture/Compare 1 output Polarity" ] # [ inline ( always ) ] pub fn cc1p ( & self ) -> Cc1pR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc1pR { bits } } # [ doc = "Bit 0 - Capture/Compare 1 output enable" ] # [ inline ( always ) ] pub fn cc1e ( & self ) -> Cc1eR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Cc1eR { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 7 - Capture/Compare 2 output Polarity" ] # [ inline ( always ) ] pub fn cc2np ( & mut self ) -> _Cc2npW { _Cc2npW { w : self } } # [ doc = "Bit 5 - Capture/Compare 2 output Polarity" ] # [ inline ( always ) ] pub fn cc2p ( & mut self ) -> _Cc2pW { _Cc2pW { w : self } } # [ doc = "Bit 4 - Capture/Compare 2 output enable" ] # [ inline ( always ) ] pub fn cc2e ( & mut self ) -> _Cc2eW { _Cc2eW { w : self } } # [ doc = "Bit 3 - Capture/Compare 1 output Polarity" ] # [ inline ( always ) ] pub fn cc1np ( & mut self ) -> _Cc1npW { _Cc1npW { w : self } } # [ doc = "Bit 1 - Capture/Compare 1 output Polarity" ] # [ inline ( always ) ] pub fn cc1p ( & mut self ) -> _Cc1pW { _Cc1pW { w : self } } # [ doc = "Bit 0 - Capture/Compare 1 output enable" ] # [ inline ( always ) ] pub fn cc1e ( & mut self ) -> _Cc1eW { _Cc1eW { w : self } } }