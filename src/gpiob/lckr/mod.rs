# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: Lckr { # [ doc = r" Modifies the contents of the register" ] # [ inline ( always ) ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ( always ) ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ( always ) ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } } # [ doc = r" Value of the field" ] pub struct LckkR { bits : u8 } impl LckkR { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck15R { bits : u8 } impl Lck15R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck14R { bits : u8 } impl Lck14R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck13R { bits : u8 } impl Lck13R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck12R { bits : u8 } impl Lck12R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck11R { bits : u8 } impl Lck11R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck10R { bits : u8 } impl Lck10R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck9R { bits : u8 } impl Lck9R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck8R { bits : u8 } impl Lck8R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck7R { bits : u8 } impl Lck7R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck6R { bits : u8 } impl Lck6R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck5R { bits : u8 } impl Lck5R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck4R { bits : u8 } impl Lck4R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck3R { bits : u8 } impl Lck3R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck2R { bits : u8 } impl Lck2R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck1R { bits : u8 } impl Lck1R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct Lck0R { bits : u8 } impl Lck0R { # [ doc = r" Value of the field as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _LckkW < 'a > { w : & 'a mut W } impl < 'a > _LckkW < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck15W < 'a > { w : & 'a mut W } impl < 'a > _Lck15W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck14W < 'a > { w : & 'a mut W } impl < 'a > _Lck14W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck13W < 'a > { w : & 'a mut W } impl < 'a > _Lck13W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck12W < 'a > { w : & 'a mut W } impl < 'a > _Lck12W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck11W < 'a > { w : & 'a mut W } impl < 'a > _Lck11W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck10W < 'a > { w : & 'a mut W } impl < 'a > _Lck10W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck9W < 'a > { w : & 'a mut W } impl < 'a > _Lck9W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck8W < 'a > { w : & 'a mut W } impl < 'a > _Lck8W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck7W < 'a > { w : & 'a mut W } impl < 'a > _Lck7W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck6W < 'a > { w : & 'a mut W } impl < 'a > _Lck6W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck5W < 'a > { w : & 'a mut W } impl < 'a > _Lck5W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck4W < 'a > { w : & 'a mut W } impl < 'a > _Lck4W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck3W < 'a > { w : & 'a mut W } impl < 'a > _Lck3W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck2W < 'a > { w : & 'a mut W } impl < 'a > _Lck2W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck1W < 'a > { w : & 'a mut W } impl < 'a > _Lck1W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _Lck0W < 'a > { w : & 'a mut W } impl < 'a > _Lck0W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ( always ) ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bit 16 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lckk ( & self ) -> LckkR { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; LckkR { bits } } # [ doc = "Bit 15 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck15 ( & self ) -> Lck15R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck15R { bits } } # [ doc = "Bit 14 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck14 ( & self ) -> Lck14R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck14R { bits } } # [ doc = "Bit 13 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck13 ( & self ) -> Lck13R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck13R { bits } } # [ doc = "Bit 12 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck12 ( & self ) -> Lck12R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck12R { bits } } # [ doc = "Bit 11 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck11 ( & self ) -> Lck11R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck11R { bits } } # [ doc = "Bit 10 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck10 ( & self ) -> Lck10R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck10R { bits } } # [ doc = "Bit 9 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck9 ( & self ) -> Lck9R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck9R { bits } } # [ doc = "Bit 8 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck8 ( & self ) -> Lck8R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck8R { bits } } # [ doc = "Bit 7 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck7 ( & self ) -> Lck7R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck7R { bits } } # [ doc = "Bit 6 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck6 ( & self ) -> Lck6R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck6R { bits } } # [ doc = "Bit 5 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck5 ( & self ) -> Lck5R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck5R { bits } } # [ doc = "Bit 4 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck4 ( & self ) -> Lck4R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck4R { bits } } # [ doc = "Bit 3 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck3 ( & self ) -> Lck3R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck3R { bits } } # [ doc = "Bit 2 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck2 ( & self ) -> Lck2R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck2R { bits } } # [ doc = "Bit 1 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck1 ( & self ) -> Lck1R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck1R { bits } } # [ doc = "Bit 0 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck0 ( & self ) -> Lck0R { let bits = { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; Lck0R { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ( always ) ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ( always ) ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 16 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lckk ( & mut self ) -> _LckkW { _LckkW { w : self } } # [ doc = "Bit 15 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck15 ( & mut self ) -> _Lck15W { _Lck15W { w : self } } # [ doc = "Bit 14 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck14 ( & mut self ) -> _Lck14W { _Lck14W { w : self } } # [ doc = "Bit 13 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck13 ( & mut self ) -> _Lck13W { _Lck13W { w : self } } # [ doc = "Bit 12 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck12 ( & mut self ) -> _Lck12W { _Lck12W { w : self } } # [ doc = "Bit 11 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck11 ( & mut self ) -> _Lck11W { _Lck11W { w : self } } # [ doc = "Bit 10 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck10 ( & mut self ) -> _Lck10W { _Lck10W { w : self } } # [ doc = "Bit 9 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck9 ( & mut self ) -> _Lck9W { _Lck9W { w : self } } # [ doc = "Bit 8 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck8 ( & mut self ) -> _Lck8W { _Lck8W { w : self } } # [ doc = "Bit 7 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck7 ( & mut self ) -> _Lck7W { _Lck7W { w : self } } # [ doc = "Bit 6 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck6 ( & mut self ) -> _Lck6W { _Lck6W { w : self } } # [ doc = "Bit 5 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck5 ( & mut self ) -> _Lck5W { _Lck5W { w : self } } # [ doc = "Bit 4 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck4 ( & mut self ) -> _Lck4W { _Lck4W { w : self } } # [ doc = "Bit 3 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck3 ( & mut self ) -> _Lck3W { _Lck3W { w : self } } # [ doc = "Bit 2 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck2 ( & mut self ) -> _Lck2W { _Lck2W { w : self } } # [ doc = "Bit 1 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck1 ( & mut self ) -> _Lck1W { _Lck1W { w : self } } # [ doc = "Bit 0 - Port x lock bit y (y= 0..15)" ] # [ inline ( always ) ] pub fn lck0 ( & mut self ) -> _Lck0W { _Lck0W { w : self } } }